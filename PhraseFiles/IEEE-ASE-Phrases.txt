2220
software engineering: {1997: 13, 2000: 7, 2009: 99, 2011: 26, 2015: 27, 1998: 10, 1999: 14, 2001: 16, 2002: 21, 2003: 38, 2004: 35, 2006: 39, 2008: 18, 2012: 20, 2013: 13, 2016: 28, 2017: 24}
program testing: {2012: 13, 2017: 29, 1997: 4, 1998: 8, 1999: 7, 2000: 7, 2001: 11, 2002: 15, 2003: 12, 2004: 19, 2006: 10, 2008: 18, 2009: 21, 2011: 24, 2013: 21, 2015: 19, 2016: 34}
formal specification: {1998: 21, 1999: 18, 2001: 33, 2002: 15, 2008: 15, 2015: 6, 1997: 22, 2000: 12, 2003: 15, 2004: 18, 2006: 25, 2009: 16, 2011: 9, 2012: 9, 2013: 10, 2016: 9, 2017: 9}
software systems: {2004: 13, 1997: 12, 1998: 11, 1999: 17, 2000: 15, 2001: 16, 2002: 7, 2003: 15, 2006: 20, 2008: 13, 2009: 23, 2011: 19, 2012: 3, 2013: 5, 2015: 10, 2016: 8, 2017: 11}
software tools: {1998: 21, 1997: 10, 1999: 13, 2000: 17, 2001: 14, 2002: 9, 2003: 9, 2004: 18, 2006: 19, 2008: 18, 2009: 26, 2011: 4, 2012: 1, 2013: 7, 2015: 4, 2016: 9, 2017: 1}
software maintenance: {2000: 5, 2016: 17, 1997: 17, 1998: 9, 1999: 5, 2001: 12, 2002: 7, 2003: 23, 2004: 9, 2006: 10, 2008: 8, 2009: 8, 2011: 17, 2012: 11, 2013: 7, 2015: 10, 2017: 23}
computer science: {2002: 15, 1997: 14, 1998: 17, 1999: 13, 2000: 12, 2001: 19, 2003: 20, 2004: 26, 2006: 14, 2008: 2, 2009: 21, 2011: 4, 2015: 3, 2016: 2, 2017: 4}
program verification: {2000: 9, 2001: 24, 2009: 10, 1997: 9, 1998: 4, 1999: 14, 2002: 2, 2003: 10, 2004: 14, 2006: 10, 2008: 17, 2011: 10, 2012: 2, 2013: 8, 2015: 5, 2016: 7, 2017: 18}
program diagnostics: {2008: 13, 2009: 11, 1997: 2, 1999: 3, 2001: 3, 2002: 2, 2003: 11, 2004: 8, 2006: 15, 2011: 22, 2012: 5, 2013: 12, 2015: 14, 2016: 16, 2017: 33}
unified modeling language: {2011: 16, 1998: 1, 1999: 6, 2000: 7, 2001: 19, 2002: 7, 2003: 11, 2004: 11, 2006: 10, 2008: 22, 2009: 8, 2012: 3, 2013: 13, 2015: 7, 2016: 9, 2017: 7}
program debugging: {1997: 1, 1998: 2, 1999: 4, 2002: 2, 2003: 7, 2004: 5, 2006: 10, 2008: 6, 2009: 6, 2011: 20, 2012: 10, 2013: 14, 2015: 15, 2016: 24, 2017: 26}
formal verification: {2002: 13, 2004: 13, 1997: 5, 1998: 10, 1999: 5, 2000: 3, 2001: 7, 2003: 6, 2006: 3, 2008: 6, 2009: 10, 2011: 19, 2012: 6, 2013: 13, 2015: 10, 2016: 7, 2017: 7}
software testing: {1997: 7, 1998: 8, 1999: 6, 2000: 5, 2001: 11, 2002: 9, 2003: 10, 2004: 21, 2006: 11, 2008: 1, 2009: 23, 2011: 4, 2012: 1, 2013: 5, 2015: 1, 2016: 8, 2017: 2}
application software: {1999: 10, 2000: 5, 1997: 12, 1998: 12, 2001: 15, 2002: 17, 2003: 12, 2004: 16, 2006: 14, 2009: 18}
software architecture: {1997: 6, 1999: 12, 2006: 17, 1998: 4, 2000: 8, 2001: 10, 2002: 7, 2003: 16, 2004: 11, 2008: 9, 2009: 7, 2011: 5, 2012: 1, 2013: 7, 2015: 2, 2016: 4, 2017: 3}
source code: {1997: 4, 1998: 2, 1999: 1, 2001: 5, 2003: 11, 2004: 3, 2006: 4, 2008: 13, 2009: 6, 2011: 17, 2012: 6, 2013: 7, 2015: 22, 2016: 10, 2017: 15}
object-oriented programming: {2004: 19, 1997: 7, 1998: 7, 1999: 5, 2000: 5, 2001: 9, 2002: 13, 2003: 12, 2006: 8, 2008: 10, 2009: 8, 2011: 4, 2012: 2, 2013: 3, 2015: 4, 2016: 2, 2017: 6}
data mining: {2008: 11, 2015: 19, 1997: 2, 1998: 1, 1999: 4, 2000: 3, 2001: 2, 2003: 1, 2004: 3, 2006: 7, 2009: 13, 2011: 20, 2012: 1, 2013: 7, 2016: 12, 2017: 17}
software development: {1997: 3, 1998: 2, 1999: 3, 2000: 7, 2001: 3, 2003: 7, 2004: 4, 2006: 9, 2008: 10, 2009: 4, 2011: 12, 2012: 5, 2013: 3, 2015: 9, 2016: 11, 2017: 11}
automatic testing: {1997: 2, 1998: 6, 1999: 8, 2000: 6, 2001: 9, 2002: 11, 2003: 4, 2004: 20, 2006: 8, 2008: 2, 2009: 18, 2012: 2, 2013: 5, 2017: 2}
computer bugs: {1997: 1, 1999: 1, 2000: 1, 2001: 2, 2002: 1, 2003: 2, 2004: 3, 2006: 4, 2008: 3, 2009: 8, 2011: 6, 2013: 10, 2015: 13, 2016: 21, 2017: 24}
software quality: {2003: 9, 1997: 1, 1998: 1, 1999: 13, 2000: 2, 2001: 5, 2002: 10, 2004: 3, 2006: 2, 2008: 2, 2009: 7, 2011: 5, 2012: 4, 2013: 4, 2015: 7, 2016: 11, 2017: 8}
computational modeling: {2011: 20, 2001: 5, 2002: 1, 2003: 2, 2004: 4, 2006: 2, 2008: 18, 2009: 3, 2013: 5, 2015: 10, 2016: 11, 2017: 9}
specification languages: {1997: 5, 1998: 4, 1999: 6, 2000: 5, 2001: 19, 2002: 9, 2003: 10, 2004: 2, 2006: 1, 2008: 9, 2009: 4, 2011: 3, 2012: 1, 2013: 3, 2016: 5, 2017: 2}
model checking: {2002: 7, 1997: 1, 1998: 2, 1999: 3, 2000: 4, 2001: 10, 2003: 6, 2004: 6, 2006: 1, 2008: 7, 2009: 10, 2011: 4, 2012: 3, 2013: 7, 2015: 7, 2016: 1, 2017: 8}
computer aided software engineering: {1999: 10, 2004: 9, 1997: 18, 1998: 22, 2000: 14, 2001: 1, 2002: 7, 2003: 2, 2006: 1, 2009: 1}
computer architecture: {1999: 8, 2006: 7, 1997: 6, 1998: 2, 2000: 5, 2001: 9, 2002: 2, 2003: 6, 2004: 6, 2008: 7, 2009: 7, 2011: 2, 2013: 5, 2015: 5, 2017: 4}
test cases: {1999: 1, 2000: 1, 2001: 10, 2002: 7, 2003: 2, 2004: 7, 2008: 3, 2009: 9, 2011: 4, 2012: 6, 2013: 10, 2015: 3, 2016: 13, 2017: 5}
formal specifications: {2001: 9, 1997: 15, 1998: 15, 1999: 10, 2000: 2, 2002: 5, 2003: 1, 2004: 1, 2006: 4, 2008: 2, 2009: 6, 2011: 3, 2015: 3, 2016: 2}
static analysis: {1998: 1, 2001: 5, 2003: 2, 2004: 3, 2006: 4, 2008: 5, 2009: 4, 2011: 5, 2012: 5, 2013: 3, 2015: 17, 2016: 12, 2017: 7}
reverse engineering: {1997: 8, 1999: 1, 1998: 12, 2000: 4, 2001: 6, 2002: 4, 2003: 6, 2004: 1, 2006: 3, 2008: 2, 2009: 7, 2011: 1, 2012: 2, 2013: 2, 2015: 3, 2016: 6, 2017: 2}
object oriented modeling: {2004: 5, 1997: 3, 1998: 3, 1999: 3, 2000: 4, 2001: 8, 2002: 6, 2003: 5, 2006: 5, 2008: 7, 2009: 4, 2011: 4, 2013: 2, 2015: 3, 2016: 3, 2017: 2}
software reusability: {1999: 5, 1997: 10, 1998: 8, 2000: 3, 2001: 5, 2002: 3, 2003: 3, 2004: 2, 2006: 3, 2008: 3, 2009: 3, 2011: 8, 2012: 3, 2013: 1, 2015: 3, 2016: 1, 2017: 2}
program compilers: {2000: 2, 2004: 10, 1997: 1, 1998: 1, 1999: 1, 2001: 6, 2002: 3, 2003: 1, 2006: 5, 2008: 4, 2009: 2, 2011: 8, 2012: 2, 2013: 5, 2015: 4, 2016: 5, 2017: 6}
analytical models: {1998: 1, 2000: 1, 2003: 2, 2004: 2, 2008: 18, 2011: 13, 2013: 7, 2015: 5, 2016: 7, 2017: 8}
algorithm design and analysis: {1998: 2, 2001: 6, 1997: 2, 1999: 1, 2002: 1, 2003: 3, 2004: 3, 2006: 3, 2008: 5, 2009: 3, 2011: 5, 2013: 6, 2015: 7, 2016: 7, 2017: 8}
public domain software: {2012: 3, 2004: 2, 2006: 3, 2008: 3, 2009: 2, 2011: 6, 2013: 5, 2015: 10, 2016: 12, 2017: 16}
data structures: {1997: 10, 1998: 1, 1999: 1, 2000: 4, 2001: 5, 2002: 3, 2003: 4, 2004: 5, 2008: 5, 2009: 4, 2011: 8, 2013: 4, 2015: 3, 2016: 1, 2017: 4}
software libraries: {1997: 11, 1998: 10, 1999: 3, 2000: 2, 2001: 9, 2003: 3, 2004: 1, 2006: 2, 2008: 1, 2009: 8, 2011: 2, 2012: 1, 2013: 3, 2015: 1, 2016: 2, 2017: 2}
programming profession: {2000: 3, 1997: 3, 1998: 3, 1999: 3, 2001: 6, 2002: 2, 2003: 8, 2004: 9, 2006: 7, 2009: 14, 2013: 1, 2015: 1}
graphical user interfaces: {2017: 11, 1997: 1, 1998: 3, 1999: 2, 2000: 2, 2002: 2, 2003: 7, 2004: 5, 2006: 1, 2008: 2, 2009: 2, 2011: 2, 2012: 2, 2013: 1, 2015: 9, 2016: 6}
automatic programming: {1998: 2, 1999: 12, 2000: 2, 2001: 14, 2002: 1, 2003: 9, 2004: 5, 2006: 2, 2008: 1, 2009: 7, 2011: 1, 2013: 1, 2016: 1}
user interfaces: {1997: 3, 1998: 1, 1999: 1, 2000: 2, 2001: 1, 2002: 3, 2003: 3, 2004: 5, 2006: 5, 2008: 6, 2009: 6, 2011: 2, 2012: 4, 2013: 1, 2015: 5, 2016: 6, 2017: 3}
system testing: {1997: 1, 1998: 6, 1999: 4, 2000: 3, 2001: 8, 2002: 6, 2003: 4, 2004: 10, 2006: 6, 2009: 8, 2013: 1}
computer languages: {2000: 6, 1997: 5, 1998: 5, 1999: 2, 2001: 9, 2002: 2, 2003: 7, 2004: 2, 2006: 4, 2008: 6, 2009: 2, 2013: 1, 2015: 2, 2017: 2}
learning (artificial intelligence): {1998: 1, 2000: 1, 2002: 1, 2004: 1, 2006: 1, 2009: 1, 2011: 5, 2012: 2, 2013: 8, 2015: 6, 2016: 11, 2017: 16}
symbolic execution: {2004: 3, 2006: 4, 2008: 3, 2009: 3, 2011: 11, 2012: 1, 2013: 2, 2015: 5, 2016: 15, 2017: 6}
software design: {1998: 3, 1997: 2, 1999: 4, 2000: 6, 2001: 5, 2002: 3, 2003: 7, 2004: 4, 2006: 6, 2008: 1, 2009: 3, 2015: 5, 2016: 1}
mobile computing: {2017: 11, 2004: 5, 2006: 1, 2008: 2, 2009: 3, 2012: 4, 2013: 2, 2015: 12, 2016: 9}
natural languages: {1997: 4, 1998: 1, 1999: 4, 2000: 3, 2001: 2, 2002: 1, 2003: 1, 2004: 2, 2006: 1, 2008: 1, 2009: 6, 2011: 8, 2013: 2, 2015: 3, 2016: 3, 2017: 6}
software metrics: {1997: 1, 1998: 6, 1999: 3, 2001: 2, 2002: 3, 2003: 1, 2004: 5, 2006: 1, 2008: 4, 2009: 2, 2011: 5, 2012: 2, 2013: 2, 2016: 3, 2017: 7}
application program interfaces: {1998: 1, 2001: 1, 2002: 1, 2004: 2, 2006: 1, 2008: 4, 2009: 4, 2011: 3, 2012: 1, 2013: 3, 2015: 10, 2016: 6, 2017: 10}
case study: {1997: 2, 1998: 5, 2004: 4, 1999: 8, 2000: 1, 2001: 5, 2002: 3, 2003: 1, 2008: 2, 2009: 4, 2011: 6, 2012: 1, 2013: 1, 2015: 2, 2016: 1}
theorem proving: {2001: 9, 1997: 5, 1998: 5, 1999: 6, 2000: 2, 2002: 1, 2003: 1, 2006: 3, 2011: 1, 2012: 2, 2015: 3, 2016: 3, 2017: 4}
large number: {2017: 6, 1999: 3, 2000: 1, 2001: 1, 2003: 2, 2004: 1, 2006: 2, 2008: 3, 2009: 6, 2011: 5, 2012: 4, 2013: 2, 2015: 3, 2016: 6}
concurrent computing: {1997: 1, 1999: 1, 2000: 1, 2001: 5, 2002: 1, 2003: 3, 2004: 3, 2006: 2, 2009: 4, 2011: 4, 2013: 3, 2015: 6, 2016: 4, 2017: 6}
educational institutions: {1997: 4, 1998: 2, 1999: 2, 2000: 1, 2001: 3, 2002: 1, 2003: 4, 2004: 3, 2006: 3, 2009: 2, 2011: 8, 2013: 11}
software evolution: {2000: 1, 1998: 1, 2003: 6, 2004: 2, 2006: 1, 2008: 4, 2009: 1, 2011: 5, 2012: 4, 2013: 5, 2015: 7, 2016: 3, 2017: 3}
software system: {2016: 1, 1998: 2, 1999: 3, 2001: 1, 2002: 1, 2003: 1, 2004: 2, 2006: 6, 2008: 4, 2009: 2, 2011: 9, 2012: 1, 2013: 1, 2015: 1, 2017: 8}
experimental results: {2009: 3, 2017: 4, 1997: 1, 1998: 1, 1999: 3, 2000: 1, 2001: 1, 2004: 1, 2006: 1, 2008: 5, 2011: 2, 2012: 1, 2013: 5, 2015: 4, 2016: 8}
information retrieval: {1997: 2, 1998: 2, 2000: 1, 2001: 3, 2002: 1, 2003: 1, 2008: 1, 2009: 3, 2011: 10, 2012: 2, 2013: 2, 2015: 6, 2016: 4, 2017: 3}
maintenance engineering: {1997: 2, 2002: 2, 2003: 1, 2008: 4, 2009: 1, 2011: 5, 2013: 3, 2015: 7, 2016: 6, 2017: 9}
genetic algorithms: {1997: 4, 1998: 4, 2000: 3, 2002: 5, 2003: 4, 2004: 3, 2008: 1, 2009: 2, 2011: 4, 2012: 2, 2013: 3, 2015: 3, 2016: 1, 2017: 1}
machine learning: {1998: 1, 2000: 4, 2002: 2, 2004: 1, 2006: 2, 2009: 3, 2011: 4, 2013: 5, 2015: 1, 2016: 10, 2017: 7}
natural language processing: {1997: 1, 2001: 1, 2008: 1, 2009: 4, 2011: 3, 2012: 1, 2013: 10, 2015: 4, 2016: 9, 2017: 5}
design patterns: {2000: 7, 1997: 4, 1998: 1, 1999: 4, 2001: 5, 2002: 3, 2003: 1, 2008: 3, 2009: 5, 2012: 3, 2013: 2}
computer industry: {1999: 3, 1997: 3, 1998: 4, 2000: 1, 2001: 6, 2002: 4, 2003: 1, 2004: 6, 2006: 4, 2009: 5}
novel approach: {2017: 2, 1999: 2, 2001: 2, 2002: 2, 2003: 1, 2008: 4, 2009: 2, 2011: 4, 2012: 4, 2013: 6, 2015: 4, 2016: 3}
electronic mail: {1997: 2, 2000: 5, 2001: 2, 2002: 1, 2003: 9, 2004: 5, 2006: 1, 2009: 2, 2011: 2, 2013: 1, 2015: 5, 2017: 1}
formal methods: {1997: 6, 1998: 7, 1999: 5, 2000: 2, 2001: 3, 2002: 1, 2006: 1, 2008: 4, 2009: 5, 2012: 1}
software developers: {2016: 8, 2001: 6, 2004: 1, 2006: 1, 2008: 5, 2009: 1, 2011: 4, 2012: 2, 2015: 4, 2017: 2}
open source software: {2000: 1, 2003: 1, 2004: 1, 2006: 6, 2009: 3, 2011: 3, 2013: 3, 2015: 4, 2016: 4, 2017: 8}
software prototyping: {1997: 1, 1998: 1, 2000: 1, 2001: 6, 2002: 5, 2003: 5, 2004: 4, 2006: 1, 2008: 2, 2009: 1, 2011: 4, 2012: 1, 2013: 1}
feature extraction: {2004: 1, 2008: 3, 2009: 1, 2011: 7, 2013: 5, 2015: 7, 2016: 5, 2017: 4}
inference mechanisms: {1999: 1, 1997: 3, 2000: 2, 2001: 6, 2002: 1, 2003: 2, 2004: 1, 2008: 1, 2009: 1, 2011: 3, 2012: 2, 2013: 2, 2015: 1, 2016: 4, 2017: 2}
temporal logic: {2015: 1, 1998: 1, 1999: 3, 2001: 2, 2002: 5, 2003: 5, 2004: 2, 2006: 1, 2008: 4, 2011: 1, 2013: 4, 2016: 1, 2017: 2}
automatic control: {1997: 4, 1998: 1, 1999: 4, 2000: 2, 2001: 4, 2003: 3, 2004: 5, 2006: 3, 2009: 6}
systems analysis: {1997: 1, 1998: 2, 1999: 2, 2000: 3, 2001: 4, 2002: 2, 2003: 2, 2004: 3, 2006: 1, 2008: 5, 2009: 2, 2011: 2, 2013: 1, 2016: 2}
configuration management: {2011: 2, 1997: 1, 1999: 1, 2000: 1, 2002: 1, 2006: 11, 2008: 3, 2009: 3, 2012: 1, 2013: 2, 2015: 2, 2016: 1, 2017: 2}
query processing: {2016: 4, 1997: 2, 2000: 1, 2008: 1, 2011: 10, 2012: 1, 2013: 4, 2015: 4, 2017: 4}
project management: {1997: 2, 1998: 1, 2000: 3, 2001: 3, 2002: 1, 2004: 3, 2006: 1, 2008: 2, 2009: 3, 2013: 1, 2015: 2, 2016: 3, 2017: 6}
search problems: {1997: 1, 1998: 3, 1999: 1, 2000: 1, 2002: 1, 2003: 1, 2004: 1, 2011: 7, 2013: 6, 2015: 4, 2016: 5}
source code (software): {2013: 4, 2015: 12, 2016: 12, 2017: 3}
mathematical model: {2009: 3, 1997: 1, 1998: 2, 2000: 1, 2001: 2, 2002: 3, 2003: 1, 2004: 1, 2008: 4, 2011: 5, 2013: 1, 2015: 3, 2016: 1, 2017: 2}
data flow analysis: {1997: 5, 1999: 1, 2000: 1, 2002: 1, 2004: 2, 2006: 1, 2009: 2, 2012: 1, 2013: 4, 2015: 8, 2016: 2, 2017: 2}
programming environments: {1997: 8, 1998: 2, 1999: 2, 2000: 1, 2001: 3, 2002: 1, 2003: 2, 2004: 1, 2006: 2, 2008: 3, 2009: 4, 2016: 1}
data models: {1997: 1, 1998: 1, 2006: 2, 2008: 4, 2011: 3, 2012: 1, 2013: 2, 2015: 7, 2016: 6, 2017: 3}
fault detection: {1998: 3, 2000: 1, 2001: 3, 2002: 2, 2003: 2, 2004: 6, 2008: 1, 2009: 3, 2011: 2, 2015: 1, 2016: 5, 2017: 1}
software performance evaluation: {1998: 1, 1999: 1, 2000: 2, 2001: 1, 2002: 2, 2004: 4, 2008: 1, 2009: 2, 2011: 4, 2013: 3, 2015: 3, 2016: 4, 2017: 2}
concurrency control: {2000: 1, 2001: 3, 2002: 1, 2003: 3, 2004: 2, 2008: 2, 2009: 1, 2011: 5, 2012: 1, 2013: 2, 2016: 4, 2017: 5}
web applications: {2004: 2, 2006: 2, 2008: 2, 2009: 5, 2011: 2, 2012: 4, 2015: 5, 2016: 3, 2017: 5}
software engineers: {1997: 2, 1998: 1, 1999: 2, 2000: 2, 2001: 2, 2002: 2, 2003: 3, 2004: 1, 2006: 1, 2011: 4, 2012: 1, 2015: 6, 2016: 1, 2017: 1}
object-oriented methods: {2000: 4, 1997: 3, 1998: 6, 1999: 3, 2002: 2, 2004: 1, 2008: 1, 2009: 4, 2015: 4, 2016: 1}
fault diagnosis: {2003: 5, 2009: 5, 2002: 1, 2004: 3, 2006: 2, 2008: 2, 2012: 1, 2015: 3, 2016: 3, 2017: 4}
artificial intelligence: {2006: 3, 1997: 3, 1998: 2, 1999: 2, 2000: 2, 2001: 4, 2002: 2, 2003: 2, 2004: 3, 2008: 1, 2009: 4, 2011: 1}
performance analysis: {2008: 2, 1997: 2, 2000: 2, 2001: 1, 2002: 1, 2003: 3, 2004: 6, 2006: 2, 2009: 2, 2011: 1, 2013: 1, 2016: 5, 2017: 1}
context modeling: {2011: 4, 1997: 1, 1998: 1, 1999: 1, 2001: 3, 2003: 2, 2004: 3, 2006: 4, 2008: 2, 2009: 3, 2013: 1, 2016: 1, 2017: 3}
dynamic analysis: {2013: 2, 2015: 5, 2002: 1, 2003: 2, 2004: 3, 2009: 3, 2011: 5, 2016: 5, 2017: 3}
humanoid robots: {2017: 8, 2013: 3, 2015: 10, 2016: 8}
android (operating system): {2017: 8, 2013: 4, 2015: 9, 2016: 8}
benchmark testing: {1997: 1, 2008: 3, 2011: 4, 2013: 6, 2015: 4, 2016: 3, 2017: 8}
fault localization: {2003: 2, 2004: 2, 2008: 1, 2009: 4, 2011: 6, 2012: 4, 2013: 4, 2015: 4, 2017: 2}
control systems: {1998: 1, 2002: 2, 1997: 1, 1999: 2, 2000: 1, 2001: 4, 2003: 4, 2004: 2, 2006: 2, 2008: 1, 2009: 5, 2011: 1, 2013: 1, 2016: 1}
system recovery: {2001: 2, 2000: 1, 2003: 1, 2004: 4, 2006: 1, 2008: 2, 2009: 3, 2011: 2, 2012: 1, 2013: 2, 2015: 3, 2016: 4, 2017: 2}
information analysis: {1997: 5, 1998: 2, 1999: 1, 2000: 3, 2001: 5, 2002: 1, 2003: 3, 2004: 6, 2006: 1, 2012: 1}
usa councils: {1997: 1, 2001: 1, 2002: 1, 2008: 3, 2009: 13, 2011: 9}
natural language: {1997: 2, 1999: 3, 2001: 1, 2008: 2, 2009: 2, 2011: 6, 2013: 1, 2015: 5, 2016: 2, 2017: 4}
mobile applications: {2009: 1, 2013: 2, 2015: 13, 2016: 9, 2017: 3}
software components: {1997: 1, 1999: 4, 2000: 1, 2001: 5, 2002: 3, 2003: 2, 2004: 1, 2008: 2, 2009: 5, 2013: 1, 2015: 1, 2016: 1}
tool support: {1998: 1, 1999: 2, 2000: 1, 2001: 2, 2003: 1, 2006: 1, 2008: 4, 2009: 2, 2011: 2, 2012: 1, 2013: 2, 2015: 2, 2016: 1, 2017: 5}
requirements engineering: {1998: 1, 1999: 2, 2000: 2, 2003: 3, 2004: 1, 2006: 5, 2009: 3, 2011: 1, 2012: 4, 2013: 1, 2016: 2, 2017: 2}
software fault tolerance: {1999: 1, 2004: 1, 2006: 1, 2008: 2, 2009: 1, 2011: 10, 2012: 2, 2013: 4, 2015: 2, 2016: 2, 2017: 1}
design engineering: {1997: 4, 1998: 1, 1999: 3, 2000: 2, 2001: 2, 2002: 3, 2003: 3, 2004: 2, 2006: 2, 2009: 4}
software reliability: {2003: 1, 1998: 3, 1999: 1, 2002: 2, 2004: 1, 2006: 1, 2008: 2, 2009: 1, 2011: 3, 2012: 1, 2013: 5, 2016: 4, 2017: 1}
predictive models: {2003: 2, 1998: 1, 2001: 1, 2002: 2, 2008: 1, 2009: 1, 2011: 4, 2013: 3, 2015: 3, 2016: 4, 2017: 4}
knowledge based systems: {2011: 1, 1997: 7, 1998: 1, 2001: 2, 2002: 2, 2004: 1, 2008: 1, 2012: 2, 2013: 2, 2015: 3, 2016: 2, 2017: 2}
software product lines: {2000: 2, 2008: 1, 2011: 9, 2012: 1, 2013: 3, 2015: 5, 2016: 2, 2017: 3}
empirical study: {2008: 1, 2009: 1, 2011: 1, 2012: 4, 2013: 5, 2015: 3, 2016: 3, 2017: 8}
new approach: {2002: 4, 2000: 1, 2001: 1, 2004: 1, 2006: 2, 2008: 1, 2009: 1, 2011: 4, 2012: 3, 2013: 1, 2015: 1, 2016: 3, 2017: 2}
complexity theory: {2015: 4, 2008: 4, 2011: 3, 2013: 6, 2016: 5, 2017: 3}
constraint handling: {1997: 2, 1998: 2, 1999: 2, 2000: 2, 2001: 2, 2002: 1, 2003: 1, 2004: 1, 2006: 1, 2008: 1, 2009: 2, 2011: 2, 2015: 2, 2016: 3, 2017: 1}
programming languages: {1997: 1, 1998: 1, 2000: 4, 2001: 2, 2003: 1, 2006: 1, 2008: 3, 2009: 2, 2011: 1, 2012: 3, 2013: 1, 2015: 2, 2016: 3}
graph theory: {1997: 1, 1998: 1, 2000: 2, 2001: 1, 2003: 2, 2006: 2, 2008: 1, 2009: 2, 2011: 4, 2013: 3, 2015: 2, 2016: 2, 2017: 2}
electrical capacitance tomography: {1998: 12, 1999: 12, 2002: 1}
test suites: {1998: 1, 2000: 1, 2001: 2, 2002: 3, 2003: 2, 2004: 1, 2008: 1, 2011: 4, 2013: 2, 2015: 2, 2016: 5, 2017: 1}
heuristic algorithms: {2000: 1, 2001: 1, 2002: 1, 2003: 1, 2004: 2, 2008: 1, 2009: 4, 2011: 4, 2015: 5, 2016: 2, 2017: 3}
java programs: {2000: 1, 2001: 3, 2002: 1, 2004: 2, 2008: 1, 2009: 5, 2011: 2, 2012: 4, 2015: 1, 2016: 3, 2017: 2}
state-space methods: {2001: 7, 1997: 2, 1998: 2, 1999: 1, 2000: 3, 2003: 1, 2004: 2, 2009: 4, 2011: 2}
system monitoring: {2013: 1, 1997: 1, 1998: 3, 1999: 2, 2001: 2, 2002: 2, 2004: 1, 2006: 1, 2008: 3, 2009: 2, 2015: 3, 2016: 1, 2017: 2}
logic programming: {1997: 4, 1998: 2, 1999: 3, 2000: 3, 2001: 2, 2002: 3, 2004: 1, 2006: 3, 2011: 1, 2015: 2}
program analysis: {1997: 2, 1999: 1, 2000: 1, 2008: 1, 2009: 2, 2012: 2, 2013: 1, 2015: 2, 2016: 6, 2017: 6}
c language: {1997: 1, 1998: 1, 1999: 1, 2003: 3, 2004: 4, 2006: 1, 2008: 2, 2011: 1, 2012: 2, 2013: 1, 2015: 3, 2016: 4}
previous work: {1998: 2, 1999: 1, 2000: 1, 2001: 2, 2004: 2, 2006: 2, 2008: 3, 2009: 2, 2011: 3, 2015: 2, 2016: 2, 2017: 2}
text analysis: {1999: 1, 2000: 2, 2008: 1, 2009: 1, 2011: 2, 2012: 2, 2013: 1, 2015: 3, 2016: 4, 2017: 7}
test suite: {2003: 2, 2008: 1, 2009: 7, 2011: 3, 2012: 2, 2013: 4, 2016: 3, 2017: 2}
mobile communication: {2008: 2, 2013: 2, 2015: 6, 2016: 9, 2017: 5}
data analysis: {2001: 1, 1997: 1, 1999: 1, 2000: 3, 2002: 1, 2003: 2, 2004: 1, 2006: 3, 2009: 4, 2012: 1, 2013: 1, 2016: 2, 2017: 2}
security of data: {1997: 1, 2000: 1, 2001: 2, 2006: 1, 2008: 1, 2009: 1, 2011: 1, 2012: 2, 2013: 1, 2015: 1, 2016: 4, 2017: 7}
software algorithms: {1998: 1, 2002: 1, 2003: 1, 2004: 1, 2006: 2, 2009: 2, 2011: 2, 2013: 1, 2015: 5, 2016: 3, 2017: 4}
large-scale systems: {1999: 1, 2000: 3, 2001: 2, 2002: 2, 2003: 1, 2004: 5, 2006: 2, 2009: 4, 2013: 2, 2017: 1}
web services: {2001: 1, 2003: 2, 2004: 3, 2006: 4, 2008: 2, 2009: 4, 2011: 1, 2012: 1, 2013: 2, 2016: 3}
search engines: {2002: 2, 2006: 1, 2008: 1, 2009: 2, 2011: 8, 2015: 4, 2017: 5}
empirical evaluation: {2006: 1, 2008: 4, 2009: 1, 2011: 5, 2012: 3, 2015: 6, 2016: 3}
model-driven engineering: {2006: 1, 2008: 1, 2009: 2, 2011: 2, 2012: 1, 2013: 6, 2015: 1, 2016: 8, 2017: 1}
performance evaluation: {1997: 3, 1998: 2, 1999: 2, 2000: 2, 2001: 3, 2002: 2, 2004: 3, 2006: 1, 2009: 2, 2016: 1, 2017: 1}
test inputs: {1997: 1, 2003: 2, 2008: 2, 2009: 5, 2011: 3, 2013: 2, 2016: 4, 2017: 3}
android apps: {2017: 5, 2013: 2, 2015: 8, 2016: 6}
program processors: {1997: 1, 1998: 2, 1999: 1, 2000: 1, 2001: 3, 2002: 1, 2003: 2, 2004: 1, 2006: 3, 2009: 1, 2013: 3, 2016: 1, 2017: 1}
software reuse: {1997: 3, 1998: 3, 1999: 2, 2000: 2, 2003: 4, 2011: 4, 2012: 1, 2015: 1, 2017: 1}
safety-critical software: {1997: 1, 1998: 1, 1999: 2, 2000: 2, 2001: 2, 2002: 2, 2003: 1, 2004: 2, 2008: 1, 2009: 1, 2011: 1, 2013: 1, 2015: 1, 2017: 3}
pattern matching: {1997: 2, 2001: 3, 2004: 1, 2006: 2, 2008: 4, 2011: 1, 2013: 2, 2015: 2, 2016: 2, 2017: 2}
web pages: {2001: 1, 2002: 1, 2006: 1, 2008: 1, 2009: 2, 2011: 8, 2013: 1, 2015: 3, 2016: 1, 2017: 2}
existing approaches: {2013: 3, 1998: 1, 2006: 1, 2009: 5, 2011: 2, 2012: 1, 2015: 3, 2016: 1, 2017: 3}
software development management: {1997: 1, 2000: 1, 2001: 1, 2002: 1, 2003: 1, 2004: 2, 2006: 1, 2008: 2, 2009: 4, 2011: 3, 2013: 1, 2015: 2}
engineering management: {1997: 1, 1999: 1, 2000: 1, 2001: 3, 2003: 1, 2006: 6, 2009: 7}
software architectures: {1997: 4, 1999: 2, 2000: 1, 2001: 5, 2003: 3, 2004: 3, 2011: 2}
software performance: {1998: 1, 2000: 3, 2001: 1, 2004: 7, 2006: 2, 2009: 2, 2015: 2, 2016: 2}
statistical analysis: {1999: 3, 2001: 2, 2002: 1, 2003: 1, 2004: 1, 2011: 1, 2012: 1, 2013: 5, 2015: 3, 2016: 1, 2017: 1}
instruction sets: {2011: 3, 2013: 6, 2015: 4, 2016: 2, 2017: 5}
smart phones: {2011: 1, 2013: 3, 2015: 6, 2016: 6, 2017: 4}
software verification: {2001: 4, 1998: 2, 1999: 1, 2008: 2, 2009: 2, 2011: 2, 2013: 1, 2015: 1, 2017: 4}
embedded software: {2009: 5, 1999: 2, 2001: 2, 2002: 2, 2003: 2, 2004: 2, 2006: 1, 2008: 2, 2013: 1}
specification language: {1997: 2, 1998: 2, 1999: 1, 2001: 4, 2002: 2, 2003: 2, 2008: 2, 2012: 2, 2013: 2}
parallel programming: {1997: 1, 1999: 1, 2001: 4, 2003: 1, 2009: 2, 2013: 2, 2015: 6, 2017: 2}
abstract interpretation: {1999: 2, 2001: 1, 2003: 2, 2006: 1, 2008: 3, 2009: 2, 2011: 1, 2015: 3, 2016: 2, 2017: 2}
program slicing: {2000: 1, 2001: 1, 2003: 1, 2011: 9, 2012: 1, 2013: 2, 2015: 1, 2016: 1, 2017: 2}
adaptation models: {2011: 9, 2013: 5, 2015: 2, 2017: 3}
execution traces: {2008: 5, 2003: 1, 2004: 2, 2009: 1, 2013: 5, 2015: 4}
computational complexity: {2009: 4, 1997: 1, 1998: 3, 1999: 1, 2006: 3, 2011: 1, 2013: 3, 2016: 2}
automatic generation: {1997: 1, 1998: 1, 2001: 1, 2002: 1, 2003: 3, 2004: 4, 2006: 1, 2008: 2, 2012: 1, 2013: 2, 2016: 1}
operating systems: {1997: 2, 1999: 1, 2000: 2, 2001: 2, 2002: 1, 2003: 2, 2004: 1, 2006: 1, 2013: 4, 2016: 1, 2017: 1}
automated approach: {1997: 2, 2001: 2, 2004: 1, 2009: 1, 2011: 1, 2013: 2, 2015: 6, 2016: 3}
test generation: {1997: 1, 1999: 2, 2006: 2, 2009: 2, 2011: 1, 2012: 2, 2013: 3, 2015: 2, 2016: 1, 2017: 2}
automated software engineering: {1999: 1, 2001: 1, 2003: 2, 2004: 3, 2006: 3, 2008: 1, 2009: 2, 2011: 3, 2016: 2}
concurrent programs: {2001: 2, 2003: 2, 2004: 2, 2008: 1, 2011: 1, 2013: 4, 2015: 3, 2017: 3}
random testing: {2001: 1, 2006: 1, 2008: 4, 2009: 2, 2011: 5, 2015: 4, 2016: 1}
software model checking: {2003: 1, 2006: 2, 2008: 1, 2009: 3, 2011: 5, 2012: 2, 2013: 2, 2017: 2}
aspect-oriented programming: {2004: 1, 2006: 3, 2009: 6, 2012: 4, 2013: 1, 2015: 3}
systems engineering and theory: {1998: 1, 1997: 2, 1999: 1, 2001: 3, 2002: 1, 2003: 2, 2004: 3, 2006: 2, 2009: 2}
specification mining: {2008: 1, 2015: 4, 2009: 2, 2011: 1, 2013: 3, 2016: 2, 2017: 4}
software projects: {1997: 1, 2008: 1, 2009: 6, 2013: 1, 2015: 2, 2016: 2, 2017: 4}
software safety: {1997: 2, 1998: 2, 1999: 1, 2000: 1, 2001: 5, 2002: 1, 2003: 2, 2004: 1, 2006: 1, 2009: 1}
program understanding: {1997: 2, 1998: 4, 2000: 1, 2002: 1, 2003: 1, 2006: 1, 2011: 2, 2015: 1, 2016: 2, 2017: 2}
state space: {1998: 1, 2000: 1, 2001: 5, 2002: 2, 2009: 3, 2011: 4, 2015: 1}
logic testing: {1998: 1, 1999: 1, 2000: 1, 2001: 5, 2002: 1, 2004: 3, 2006: 1, 2009: 4}
software artifacts: {1998: 2, 1999: 2, 2004: 2, 2006: 1, 2008: 4, 2009: 1, 2011: 4, 2013: 1}
distributed systems: {1999: 1, 2002: 4, 2003: 4, 2011: 1, 2013: 5, 2016: 2}
reachability analysis: {2001: 2, 2003: 1, 2004: 1, 2006: 1, 2009: 3, 2011: 1, 2012: 1, 2013: 2, 2016: 2, 2017: 3}
knowledge engineering: {2003: 5, 1997: 4, 1998: 1, 1999: 1, 2002: 1, 2004: 2, 2009: 1, 2016: 1}
automated testing: {2017: 1, 1998: 1, 2001: 1, 2002: 2, 2004: 1, 2012: 7, 2013: 1, 2015: 1, 2016: 1}
formal logic: {1997: 1, 1998: 1, 2001: 4, 2003: 3, 2006: 1, 2009: 1, 2013: 1, 2016: 2, 2017: 2}
program comprehension: {1997: 1, 2003: 1, 2011: 3, 2012: 5, 2013: 1, 2015: 2, 2017: 3}
program synthesis: {1997: 1, 2000: 1, 2002: 4, 2003: 1, 2011: 2, 2013: 1, 2015: 3, 2016: 1, 2017: 2}
code generation: {1998: 1, 1999: 1, 2002: 3, 2004: 3, 2006: 2, 2008: 2, 2009: 1, 2012: 1, 2016: 1, 2017: 1}
computer errors: {1998: 2, 2000: 1, 2001: 2, 2003: 2, 2004: 3, 2006: 3, 2009: 3}
program execution: {1999: 4, 2000: 1, 2003: 1, 2008: 1, 2009: 1, 2013: 2, 2016: 6}
decision trees: {2000: 4, 2002: 3, 2004: 1, 2006: 3, 2008: 4, 2017: 1}
embedded systems: {2004: 2, 2008: 4, 2011: 1, 2012: 1, 2013: 5, 2015: 2, 2016: 1}
mobile devices: {2004: 2, 2008: 4, 2009: 3, 2012: 3, 2013: 1, 2015: 1, 2017: 2}
dynamic symbolic execution: {2009: 2, 2011: 3, 2012: 4, 2013: 2, 2015: 2, 2016: 1, 2017: 2}
summary form: {2001: 4, 2006: 2, 2002: 7, 2011: 2}
software measurement: {2002: 2, 1997: 2, 1999: 1, 2001: 1, 2003: 1, 2006: 1, 2008: 1, 2009: 3, 2011: 1, 2015: 1, 2017: 1}
android applications: {2017: 2, 2012: 2, 2013: 3, 2015: 2, 2016: 6}
formal semantics: {1997: 3, 2001: 2, 2008: 2, 2009: 2, 2011: 1, 2016: 3, 2017: 2}
collaborative software: {1997: 1, 1998: 1, 1999: 1, 2001: 2, 2002: 1, 2003: 1, 2004: 3, 2009: 5}
reactive power: {1998: 2, 1999: 3, 2001: 2, 2002: 1, 2008: 1, 2013: 2, 2015: 4}
c programs: {1998: 1, 2002: 1, 2003: 2, 2004: 1, 2006: 1, 2009: 1, 2012: 1, 2013: 1, 2015: 3, 2016: 2, 2017: 1}
search space: {1999: 2, 2001: 2, 2009: 1, 2011: 4, 2016: 5, 2017: 1}
test case: {2003: 1, 2004: 4, 2009: 1, 2011: 1, 2013: 1, 2015: 1, 2016: 6}
linux kernel: {2003: 2, 2006: 1, 2012: 6, 2013: 4, 2017: 2}
current committee members: {2004: 3, 2006: 3, 2008: 2, 2009: 2, 2015: 5}
pattern classification: {2006: 1, 2011: 2, 2013: 2, 2015: 4, 2016: 3, 2017: 3}
cloud computing: {2011: 1, 2012: 3, 2013: 6, 2015: 1, 2016: 4}
recommender systems: {2011: 1, 2015: 3, 2016: 5, 2017: 6}
pattern analysis: {1997: 1, 1998: 1, 2000: 2, 2001: 1, 2003: 3, 2006: 2, 2009: 4}
programming language: {1997: 2, 2004: 2, 2006: 1, 2008: 1, 2011: 2, 2012: 1, 2015: 3, 2017: 2}
automatic verification: {1997: 1, 1999: 5, 2001: 1, 2002: 2, 2009: 1, 2011: 2, 2017: 2}
client-server systems: {1997: 1, 1998: 1, 2000: 2, 2001: 1, 2003: 1, 2004: 1, 2006: 3, 2008: 1, 2009: 1, 2013: 1, 2016: 1}
user interface: {1997: 1, 2000: 3, 2002: 2, 2003: 1, 2008: 1, 2009: 1, 2011: 1, 2015: 2, 2016: 2}
development process: {1997: 1, 1998: 1, 2000: 1, 2001: 3, 2002: 1, 2006: 1, 2008: 2, 2011: 1, 2013: 1, 2016: 2}
space technology: {1998: 1, 1999: 1, 2001: 2, 2002: 2, 2003: 1, 2004: 1, 2006: 3, 2009: 3}
read only memory: {1998: 6, 1999: 7, 2002: 1}
open systems: {1998: 2, 1999: 1, 2003: 3, 2004: 2, 2006: 3, 2008: 1, 2011: 2}
test data: {1998: 2, 1999: 6, 2000: 1, 2001: 1, 2003: 1, 2004: 1, 2016: 2}
c++ language: {1998: 1, 2002: 1, 2009: 1, 2011: 3, 2012: 2, 2013: 2, 2015: 3, 2017: 1}
collaborative work: {1998: 1, 1999: 1, 2001: 2, 2002: 2, 2003: 2, 2004: 5, 2009: 1}
flow graphs: {1998: 1, 2000: 1, 2001: 2, 2002: 1, 2004: 1, 2006: 6, 2008: 2}
domain-specific language: {1999: 1, 2000: 1, 2003: 2, 2009: 2, 2013: 2, 2015: 1, 2016: 5}
case studies: {2000: 1, 2002: 1, 2004: 2, 2006: 3, 2008: 2, 2011: 3, 2012: 1, 2013: 1}
model checker: {2001: 2, 2004: 6, 2006: 1, 2008: 2, 2011: 2, 2015: 1}
message passing: {2001: 2, 2003: 5, 2011: 1, 2013: 4, 2015: 1, 2016: 1}
model transformations: {2001: 2, 2009: 3, 2011: 4, 2012: 4, 2013: 1}
test case generation: {2002: 2, 2004: 3, 2011: 4, 2013: 2, 2016: 3}
false positives: {2003: 1, 2006: 3, 2009: 2, 2011: 1, 2012: 1, 2015: 2, 2016: 1, 2017: 3}
data privacy: {2006: 1, 2012: 3, 2016: 5, 2017: 5}
regression testing: {2008: 3, 2009: 2, 2012: 3, 2013: 3, 2015: 1, 2017: 2}
abstract data types: {1997: 6, 2000: 3, 2001: 4}
power system modeling: {2003: 1, 1997: 1, 1999: 2, 2000: 2, 2001: 5, 2006: 2}
stack overflow: {2016: 8, 2017: 5}
information systems: {1997: 2, 2001: 3, 2003: 4, 2009: 3, 2011: 1}
software project: {1997: 1, 2001: 1, 2008: 2, 2009: 1, 2011: 2, 2013: 2, 2015: 1, 2017: 3}
error correction: {1997: 1, 1998: 3, 1999: 2, 2000: 2, 2001: 1, 2004: 1, 2006: 1, 2009: 2}
program visualisation: {1998: 3, 1999: 1, 2004: 2, 2008: 2, 2009: 1, 2011: 1, 2013: 1, 2016: 1, 2017: 1}
program interpreters: {1998: 1, 1999: 3, 2000: 1, 2001: 1, 2004: 1, 2006: 1, 2008: 2, 2009: 1, 2011: 1, 2013: 1}
software management: {1999: 1, 2001: 1, 2009: 2, 2011: 2, 2013: 1, 2015: 2, 2016: 3, 2017: 1}
reasoning about programs: {1999: 1, 2003: 1, 2006: 6, 2009: 2, 2011: 1, 2013: 2}
java pathfinder: {2000: 2, 2008: 2, 2009: 6, 2011: 1, 2015: 2}
wide range: {2001: 2, 2004: 1, 2006: 3, 2008: 1, 2013: 1, 2016: 4, 2017: 1}
access control: {2001: 5, 2002: 1, 2009: 1, 2011: 2, 2013: 1, 2016: 2, 2017: 1}
program behavior: {2001: 2, 2003: 3, 2006: 1, 2009: 1, 2011: 2, 2012: 1, 2015: 2, 2017: 1}
energy consumption: {2004: 1, 2006: 3, 2008: 1, 2012: 6, 2015: 2}
feature models: {2008: 1, 2011: 9, 2013: 2, 2017: 1}
api documentation: {2009: 4, 2015: 2, 2016: 2, 2017: 5}
bug reports: {2011: 1, 2012: 1, 2013: 2, 2015: 5, 2016: 3, 2017: 1}
defect prediction: {2011: 1, 2012: 3, 2013: 2, 2015: 4, 2016: 2, 2017: 1}
# x201d: {2011: 2, 2012: 2, 2013: 5, 2016: 4}
javascript code: {2013: 3, 2015: 9, 2016: 1}
mobile apps: {2015: 7, 2017: 6}
prototype tool: {1997: 1, 2003: 2, 2006: 1, 2008: 3, 2009: 2, 2016: 1, 2017: 2}
proposed approach: {1997: 1, 2002: 1, 2008: 1, 2009: 1, 2011: 1, 2012: 1, 2013: 2, 2015: 2, 2016: 1, 2017: 1}
software standards: {1999: 2, 1998: 3, 2001: 3, 2004: 2, 2006: 1, 2009: 1}
relational databases: {1997: 3, 1999: 2, 2000: 1, 2003: 2, 2008: 2, 2011: 2}
systems re-engineering: {1997: 4, 1998: 3, 2001: 2, 2003: 2, 2012: 1}
information resources: {1997: 5, 1998: 1, 1999: 1, 2000: 1, 2001: 1, 2003: 1, 2016: 2}
distributed processing: {1997: 2, 2000: 1, 2004: 1, 2006: 1, 2008: 1, 2009: 1, 2011: 3, 2013: 1, 2016: 1}
interactive systems: {1997: 1, 1999: 1, 2001: 1, 2002: 1, 2004: 2, 2006: 2, 2013: 2, 2016: 2}
test data generation: {1997: 1, 1999: 2, 2000: 4, 2002: 1, 2003: 1, 2016: 2, 2017: 1}
formal languages: {1997: 1, 1998: 1, 1999: 1, 2001: 3, 2003: 2, 2004: 1, 2011: 1, 2013: 1, 2017: 1}
real time systems: {1997: 1, 1998: 1, 2000: 1, 2001: 2, 2002: 1, 2004: 3, 2006: 1, 2008: 2}
space exploration: {1997: 1, 2001: 1, 2002: 1, 2009: 4, 2011: 2, 2013: 1, 2016: 1, 2017: 1}
existing tools: {1998: 1, 2004: 1, 2006: 1, 2008: 1, 2009: 1, 2011: 1, 2012: 1, 2013: 1, 2015: 1, 2016: 1, 2017: 2}
data visualization: {1998: 1, 2003: 1, 2004: 2, 2011: 1, 2013: 1, 2015: 2, 2016: 3, 2017: 1}
uml models: {1999: 4, 2002: 1, 2004: 1, 2008: 3, 2009: 1, 2011: 1, 2012: 1}
input variables: {1999: 1, 2000: 2, 2002: 1, 2004: 6, 2011: 1, 2013: 1}
iterative methods: {1999: 1, 2002: 1, 2006: 1, 2008: 1, 2009: 2, 2011: 3, 2015: 1, 2017: 2}
device drivers: {2000: 2, 2008: 2, 2011: 1, 2012: 2, 2015: 2, 2016: 3}
mutation testing: {2000: 2, 2002: 2, 2012: 1, 2013: 5, 2016: 2}
domain-specific languages: {2000: 1, 2003: 2, 2011: 2, 2013: 2, 2015: 2, 2016: 2, 2017: 1}
resource management: {2000: 5, 2001: 1, 2004: 1, 2008: 1, 2009: 1, 2011: 1, 2013: 1, 2015: 1}
recent years: {2000: 1, 2001: 1, 2009: 2, 2012: 1, 2013: 1, 2015: 1, 2016: 3, 2017: 2}
branch coverage: {2000: 1, 2003: 4, 2004: 1, 2008: 2, 2009: 2, 2011: 2}
parallel processing: {2001: 1, 2008: 1, 2009: 1, 2011: 1, 2013: 3, 2015: 2, 2017: 3}
clustering algorithms: {2001: 1, 2003: 2, 2004: 1, 2008: 1, 2009: 3, 2011: 1, 2013: 3}
automated support: {2001: 2, 2002: 2, 2004: 2, 2006: 1, 2008: 1, 2009: 1, 2015: 3}
web application: {2004: 2, 2008: 3, 2009: 1, 2011: 1, 2012: 1, 2015: 4}
regression analysis: {2004: 1, 2009: 1, 2011: 2, 2012: 2, 2013: 3, 2015: 1, 2017: 2}
product line: {2004: 1, 2006: 1, 2009: 6, 2011: 1, 2012: 1, 2013: 1, 2017: 1}
code changes: {2006: 2, 2009: 1, 2012: 1, 2013: 1, 2016: 3, 2017: 4}
execution time: {2008: 1, 2012: 1, 2013: 3, 2016: 5, 2017: 2}
bug report: {2011: 5, 2012: 1, 2013: 2, 2015: 1, 2016: 1, 2017: 2}
standards development: {1999: 2, 1997: 1, 1998: 3, 2001: 2, 2004: 1, 2006: 1, 2009: 1}
quality of service: {2000: 1, 2008: 2, 2009: 1, 2012: 1, 2013: 2, 2015: 2, 2017: 2}
computerized monitoring: {2002: 2, 1998: 1, 2001: 2, 2003: 1, 2004: 1, 2006: 2, 2009: 2}
functional requirements: {2004: 3, 2000: 1, 2002: 2, 2006: 2, 2011: 2, 2012: 1}
concept location: {2016: 3, 2011: 2, 2012: 3, 2017: 3}
design methodology: {1997: 2, 1998: 1, 1999: 2, 2003: 1, 2004: 2, 2006: 1, 2009: 2}
algebraic specification: {1997: 3, 1998: 3, 2000: 2, 2001: 2, 2004: 1}
planning (artificial intelligence): {1997: 2, 1998: 1, 1999: 2, 2004: 1, 2009: 2, 2011: 3}
domain knowledge: {1997: 2, 1998: 1, 2000: 3, 2008: 1, 2011: 1, 2012: 2, 2013: 1}
software agents: {1997: 3, 1999: 1, 2000: 2, 2001: 2, 2004: 1, 2006: 2}
functional programming: {1997: 2, 1999: 2, 2001: 4, 2008: 1, 2009: 2}
impact analysis: {1997: 2, 2006: 3, 2011: 3, 2012: 1, 2016: 1, 2017: 1}
design pattern: {1997: 1, 1998: 1, 2000: 1, 2002: 2, 2004: 3, 2008: 1, 2009: 1, 2013: 1}
joining processes: {1997: 1, 2000: 1, 2001: 1, 2002: 2, 2004: 4, 2009: 2}
real-time systems: {1997: 1, 1998: 1, 2000: 1, 2001: 2, 2004: 2, 2013: 1, 2015: 1, 2017: 2}
software tool: {1998: 1, 2000: 2, 2008: 1, 2013: 3, 2015: 2, 2016: 2}
black-box testing: {1998: 3, 2002: 1, 2006: 2, 2008: 2, 2009: 1, 2016: 2}
program control structures: {1998: 1, 1999: 1, 2000: 2, 2006: 1, 2008: 3, 2017: 3}
specification-based testing: {1998: 2, 1999: 2, 2001: 1, 2004: 1, 2006: 1, 2009: 1, 2011: 3}
software development process: {1998: 1, 2000: 1, 2002: 1, 2004: 2, 2006: 1, 2011: 1, 2012: 1, 2013: 1, 2017: 2}
information science: {1998: 2, 2000: 1, 2001: 3, 2003: 1, 2006: 2, 2009: 2}
boolean functions: {1998: 2, 1999: 1, 2004: 1, 2008: 1, 2011: 4, 2013: 1, 2015: 1}
software packages: {1999: 1, 2000: 1, 2001: 3, 2003: 1, 2006: 1, 2011: 2, 2015: 1, 2016: 1}
test execution: {1999: 3, 2002: 1, 2004: 1, 2009: 1, 2012: 1, 2013: 2, 2017: 2}
run time: {1999: 1, 2006: 1, 2008: 1, 2009: 1, 2011: 3, 2013: 4}
concurrent systems: {1999: 1, 2001: 3, 2002: 2, 2003: 2, 2015: 1, 2017: 2}
generated code: {1999: 1, 2001: 2, 2002: 1, 2006: 1, 2009: 1, 2012: 1, 2013: 1, 2017: 3}
automated technique: {1999: 2, 2002: 1, 2009: 1, 2011: 1, 2012: 2, 2013: 2, 2015: 2}
mutation operators: {2000: 3, 2001: 2, 2011: 1, 2013: 2, 2015: 1, 2016: 2}
automotive engineering: {2001: 2, 2003: 1, 2004: 1, 2006: 1, 2008: 2, 2009: 2, 2013: 1, 2015: 1}
model transformation: {2001: 2, 2011: 3, 2012: 2, 2013: 1, 2016: 2, 2017: 1}
software debugging: {2001: 1, 2003: 1, 2004: 1, 2006: 1, 2008: 1, 2009: 3, 2016: 2, 2017: 1}
control flow: {2001: 1, 2002: 1, 2004: 2, 2006: 1, 2008: 2, 2011: 2, 2017: 2}
business data processing: {2002: 1, 2008: 1, 2009: 1, 2011: 1, 2012: 1, 2013: 2, 2016: 1, 2017: 3}
existing techniques: {2002: 1, 2003: 1, 2008: 1, 2011: 2, 2013: 2, 2015: 1, 2016: 2, 2017: 1}
unit testing: {2003: 1, 2006: 3, 2008: 2, 2015: 1, 2016: 4}
refactoring tools: {2003: 2, 2004: 1, 2011: 3, 2015: 5}
object-oriented programs: {2004: 1, 2006: 2, 2008: 2, 2009: 3, 2016: 3}
open-source projects: {2006: 1, 2011: 1, 2013: 3, 2015: 1, 2016: 3, 2017: 2}
runtime verification: {2008: 1, 2009: 1, 2013: 4, 2016: 3, 2017: 2}
source coding: {2008: 2, 2009: 2, 2011: 6, 2017: 1}
demo video: {2016: 4, 2017: 7}
open source projects: {2012: 1, 2009: 3, 2015: 4, 2016: 1, 2017: 1}
new technique: {2013: 1, 2002: 1, 2004: 1, 2008: 1, 2011: 2, 2016: 1, 2017: 3}
linear temporal logic: {2015: 3, 2001: 1, 2003: 1, 2006: 2, 2008: 1, 2011: 2}
software behavior: {2015: 2, 2004: 2, 2008: 2, 2016: 2, 2017: 2}
process design: {1997: 2, 1998: 1, 2001: 1, 2002: 2, 2003: 2, 2006: 2}
trees (mathematics): {1997: 1, 2006: 1, 2008: 1, 2009: 1, 2011: 1, 2012: 1, 2015: 1, 2017: 3}
rewriting systems: {1997: 1, 2000: 2, 2001: 2, 2003: 1, 2013: 1, 2015: 1, 2016: 1, 2017: 1}
type theory: {1997: 1, 1999: 1, 2000: 1, 2006: 4, 2008: 1, 2009: 1, 2017: 1}
data visualisation: {1997: 1, 2001: 1, 2004: 1, 2006: 1, 2009: 1, 2012: 1, 2013: 1, 2016: 2, 2017: 1}
design decisions: {1998: 2, 2001: 1, 2002: 1, 2008: 1, 2009: 4, 2017: 1}
distributed computing: {1998: 1, 2000: 1, 2001: 3, 2003: 1, 2004: 3, 2006: 1}
previous research: {1998: 1, 1999: 1, 2001: 2, 2004: 2, 2006: 1, 2013: 1, 2016: 1, 2017: 1}
logic design: {1999: 1, 2000: 1, 2001: 3, 2002: 2, 2004: 1, 2006: 1, 2009: 1}
database management systems: {1999: 1, 2000: 1, 2006: 1, 2008: 2, 2011: 1, 2015: 1, 2016: 3}
consistency management: {1999: 3, 2001: 2, 2008: 1, 2011: 3, 2012: 1}
mutation analysis: {2000: 2, 2001: 2, 2009: 1, 2011: 2, 2015: 3}
automated analysis: {2000: 1, 2002: 1, 2004: 1, 2011: 5, 2013: 2}
clone detection: {2001: 2, 2004: 1, 2009: 3, 2011: 2, 2012: 1, 2016: 1}
preliminary results: {2002: 1, 2004: 1, 2008: 1, 2009: 1, 2011: 2, 2017: 4}
java program: {2002: 1, 2004: 1, 2011: 1, 2012: 4, 2016: 1, 2017: 2}
code analysis: {2003: 2, 2009: 1, 2011: 1, 2012: 1, 2013: 1, 2015: 2, 2016: 1, 2017: 1}
automated verification: {2003: 1, 2004: 1, 2006: 1, 2009: 1, 2012: 1, 2013: 2, 2016: 1, 2017: 2}
software product line: {2004: 1, 2008: 3, 2011: 3, 2013: 1, 2015: 2}
quality assurance: {2004: 1, 2009: 1, 2011: 2, 2013: 1, 2016: 5}
traceability links: {2006: 1, 2008: 4, 2011: 1, 2016: 2, 2017: 2}
model-driven development: {2006: 1, 2008: 3, 2009: 1, 2011: 1, 2012: 2, 2016: 2}
probabilistic logic: {2008: 1, 2009: 1, 2015: 3, 2016: 3, 2017: 2}
novel technique: {2008: 2, 2009: 2, 2012: 1, 2013: 1, 2015: 1, 2016: 3}
prediction algorithms: {2008: 1, 2009: 1, 2011: 2, 2015: 2, 2016: 1, 2017: 3}
tool suite: {2008: 5, 2009: 1, 2011: 1, 2016: 3}
document handling: {2008: 1, 2009: 2, 2011: 2, 2013: 2, 2015: 1, 2016: 1, 2017: 1}
mobile application: {2008: 1, 2009: 1, 2012: 1, 2013: 1, 2015: 2, 2016: 4}
support vector machines: {2009: 2, 2011: 3, 2012: 1, 2013: 1, 2015: 3}
dependence clusters: {2016: 10}
deductive synthesis: {1999: 3, 1998: 2, 2001: 1, 2002: 3}
adaptive systems: {2000: 1, 2006: 3, 2008: 1, 2009: 1, 2011: 3}
pattern recognition: {2011: 3, 1998: 1, 2003: 1, 2006: 1, 2015: 1, 2016: 2}
finite automata: {1997: 1, 2001: 4, 2004: 1, 2008: 2, 2009: 1}
control system synthesis: {1997: 2, 1999: 3, 2002: 1, 2004: 1, 2009: 1, 2017: 1}
software process: {1997: 2, 2008: 1, 2009: 2, 2011: 3, 2016: 1}
high level: {1997: 1, 1999: 1, 2000: 1, 2001: 1, 2002: 2, 2003: 1, 2004: 1, 2016: 1}
partial evaluation: {1997: 7, 2012: 2}
aerospace electronics: {1997: 1, 1999: 1, 2000: 2, 2002: 1, 2006: 2, 2008: 1, 2015: 1}
aerospace computing: {1997: 1, 1998: 1, 1999: 3, 2000: 2, 2008: 1, 2015: 1}
graphical user interface: {1997: 1, 2000: 1, 2003: 1, 2009: 2, 2012: 2, 2015: 1, 2016: 1}
finite state machines: {1998: 1, 2002: 2, 2008: 2, 2012: 1, 2013: 1, 2015: 1, 2017: 1}
identity-based encryption: {1998: 3, 1999: 6}
petri nets: {1998: 1, 2000: 1, 2001: 3, 2003: 1, 2009: 1, 2012: 2}
distributed programming: {1998: 2, 1999: 2, 2001: 1, 2003: 2, 2004: 2}
software inspection: {1998: 2, 1999: 2, 2003: 3, 2004: 1, 2008: 1}
algebraic specifications: {1998: 1, 2000: 2, 2001: 5, 2004: 1}
linear programming: {1999: 3, 2009: 2, 2015: 1, 2016: 3}
first-order logic: {1999: 3, 2006: 2, 2011: 2, 2013: 2}
architecture description languages: {1999: 3, 2000: 4, 2002: 1, 2006: 1}
component-based systems: {1999: 1, 2002: 1, 2004: 3, 2011: 3, 2015: 1}
operating systems (computers): {2000: 1, 2012: 5, 2013: 2, 2017: 1}
data structure: {2000: 1, 2002: 1, 2009: 3, 2011: 3, 2013: 1}
requirements analysis: {2000: 2, 2002: 2, 2006: 1, 2008: 2, 2009: 1, 2013: 1}
software requirements: {2000: 1, 2003: 2, 2006: 1, 2009: 2, 2016: 3}
operating system kernels: {2000: 1, 2003: 1, 2008: 1, 2012: 3, 2013: 2, 2017: 1}
genetic algorithm: {2000: 2, 2004: 2, 2009: 1, 2011: 4}
input data: {2000: 1, 2002: 2, 2008: 1, 2012: 1, 2013: 1, 2015: 1, 2016: 1, 2017: 1}
java language: {2000: 1, 2003: 2, 2004: 4, 2016: 2}
resource allocation: {2000: 1, 2004: 1, 2006: 1, 2008: 2, 2011: 1, 2013: 1, 2015: 1, 2017: 1}
uml specifications: {2001: 9}
pattern clustering: {2001: 1, 2008: 2, 2009: 1, 2011: 2, 2013: 1, 2016: 2}
hypermedia markup languages: {2001: 2, 2003: 3, 2006: 2, 2011: 1, 2016: 1}
additional information: {2001: 1, 2004: 1, 2011: 1, 2013: 1, 2015: 2, 2016: 2, 2017: 1}
program changes: {2001: 2, 2003: 2, 2008: 1, 2011: 1, 2012: 1, 2015: 1, 2016: 1}
automata theory: {2002: 1, 2003: 1, 2004: 1, 2008: 1, 2009: 2, 2013: 1, 2016: 1, 2017: 1}
automated test generation: {2004: 1, 2006: 2, 2009: 1, 2011: 1, 2013: 1, 2015: 3}
eclipse ide: {2006: 2, 2009: 2, 2012: 1, 2013: 2, 2015: 2}
multithreaded programs: {2006: 1, 2008: 4, 2009: 2, 2012: 1, 2015: 1}
code smells: {2006: 1, 2012: 5, 2013: 2, 2016: 1}
data races: {2008: 1, 2009: 4, 2015: 4}
software engineering tools: {2008: 3, 2009: 4, 2013: 2}
biological system modeling: {2008: 4, 2011: 2, 2013: 2, 2016: 1}
smt solvers: {2009: 3, 2012: 1, 2013: 2, 2017: 3}
bug detection: {2009: 1, 2015: 3, 2016: 2, 2017: 3}
eclipse plug-in: {2009: 3, 2011: 4, 2012: 1, 2017: 1}
empirical results: {2009: 1, 2011: 1, 2013: 2, 2015: 2, 2016: 2, 2017: 1}
continuous integration: {2009: 1, 2012: 1, 2016: 6, 2017: 1}
manual effort: {2011: 5, 2012: 1, 2013: 1, 2015: 2}
boundary conditions: {2016: 9}
complex systems: {1998: 1, 2001: 2, 2006: 1, 2008: 1, 2015: 2, 2016: 1}
key idea: {1998: 1, 2002: 1, 2009: 1, 2011: 1, 2013: 1, 2015: 1, 2017: 2}
automatic code generation: {2000: 3, 1999: 1, 2004: 2, 2008: 2}
code coverage: {2012: 1, 2011: 1, 2015: 4, 2016: 2}
path conditions: {2012: 2, 2016: 4, 2017: 2}
temporal properties: {2015: 1, 2001: 2, 2004: 1, 2006: 1, 2009: 1, 2017: 2}
visual programming: {1997: 1, 1999: 1, 2004: 1, 2006: 4, 2015: 1}
technology management: {1997: 1, 2000: 1, 2003: 2, 2006: 1, 2009: 3}
process control: {1997: 1, 1998: 1, 2001: 2, 2008: 2, 2011: 2}
non-functional properties: {1997: 1, 2000: 1, 2011: 1, 2012: 4, 2017: 1}
world wide web: {1997: 2, 2006: 1, 2009: 1, 2011: 2, 2015: 2}
abstract syntax trees: {1997: 2, 2003: 1, 2009: 2, 2016: 1, 2017: 2}
electronic switching systems: {1998: 3, 1999: 4, 2001: 1}
telecommunication computing: {1998: 2, 1999: 2, 2001: 1, 2002: 1, 2004: 2}
simulated annealing: {1998: 2, 2003: 2, 2004: 2, 2011: 2}
test oracles: {1998: 2, 2002: 1, 2003: 3, 2011: 1, 2017: 1}
information technology: {1998: 1, 2000: 2, 2003: 1, 2006: 2, 2012: 1, 2015: 1}
safety-critical systems: {1999: 1, 2004: 1, 2015: 1, 2017: 5}
computational linguistics: {1999: 1, 2001: 1, 2006: 1, 2008: 1, 2009: 1, 2012: 1, 2017: 2}
program source code: {1999: 2, 2002: 2, 2009: 1, 2012: 1, 2016: 2}
domain specific languages: {1999: 1, 2000: 1, 2003: 1, 2004: 1, 2006: 1, 2009: 2, 2016: 1}
prototype implementation: {1999: 1, 2000: 1, 2006: 1, 2011: 2, 2017: 3}
proof planning: {1999: 1, 2001: 2, 2003: 2, 2006: 2, 2011: 1}
software analysis: {1999: 2, 2000: 1, 2001: 1, 2003: 3, 2011: 1}
software product: {2000: 2, 2008: 3, 2012: 3}
dynamic programming: {2000: 1, 2002: 1, 2006: 4, 2009: 1, 2013: 1}
two versions: {2000: 1, 2004: 1, 2008: 1, 2011: 4, 2012: 1}
multi-agent systems: {2000: 1, 2002: 1, 2006: 1, 2008: 4, 2013: 1}
operational semantics: {2000: 1, 2009: 2, 2017: 5}
wide variety: {2000: 1, 2001: 1, 2003: 2, 2011: 1, 2015: 2, 2017: 1}
machine learning algorithms: {2000: 1, 2004: 1, 2006: 1, 2011: 1, 2013: 1, 2015: 1, 2016: 2}
game theory: {2001: 2, 2013: 6}
original program: {2001: 1, 2002: 1, 2011: 1, 2012: 3, 2017: 2}
uml diagrams: {2001: 5, 2004: 3}
data integrity: {2001: 4, 2002: 1, 2004: 1, 2006: 2}
dynamic reconfiguration: {2001: 2, 2002: 4, 2004: 1, 2006: 1}
mobile handsets: {2002: 2, 2008: 2, 2015: 1, 2016: 1, 2017: 2}
runtime monitoring: {2002: 2, 2015: 4, 2016: 1, 2017: 1}
inference algorithms: {2003: 1, 2006: 2, 2008: 1, 2009: 1, 2015: 2, 2017: 1}
processor scheduling: {2003: 1, 2004: 2, 2009: 1, 2011: 1, 2013: 1, 2017: 2}
software engineering tasks: {2004: 1, 2013: 1, 2015: 2, 2017: 4}
society officers: {2008: 1, 2009: 2, 2015: 5}
evolution (biology): {2008: 8}
distance measurement: {2008: 7, 2015: 1}
effort estimation: {2008: 3, 2011: 1, 2016: 4}
code completion: {2008: 3, 2009: 2, 2015: 1, 2017: 2}
open source: {2008: 2, 2009: 1, 2011: 1, 2015: 2, 2016: 2}
evaluation results: {2009: 1, 2012: 1, 2013: 1, 2015: 4, 2016: 1}
code search: {2009: 1, 2011: 1, 2013: 1, 2015: 3, 2016: 1, 2017: 1}
large set: {2009: 1, 2013: 1, 2015: 3, 2016: 2, 2017: 1}
constraint solvers: {2009: 1, 2011: 2, 2016: 3, 2017: 2}
automated debugging: {2009: 3, 2011: 2, 2012: 2, 2013: 1}
experimental evaluation: {2011: 2, 2012: 1, 2013: 3, 2016: 2}
previous approaches: {2011: 1, 2013: 3, 2015: 3, 2017: 1}
constraint satisfaction problem: {2011: 1, 2013: 3, 2015: 2, 2016: 2}
training data: {2011: 2, 2015: 2, 2016: 3, 2017: 1}
automated program repair: {2013: 3, 2015: 1, 2017: 4}
consistency checking: {2000: 2, 2004: 2, 2006: 1, 2011: 1, 2012: 1}
ubiquitous computing: {2001: 2, 2004: 2, 2009: 2, 2017: 1}
use case: {2004: 1, 2000: 3, 2001: 3}
large programs: {2009: 1, 2002: 1, 2008: 1, 2013: 3, 2016: 1}
eclipse modeling framework: {2011: 3, 2009: 2, 2016: 2}
state-of-the-art techniques: {2012: 1, 2008: 1, 2015: 1, 2016: 1, 2017: 3}
test input generation: {2017: 3, 2006: 1, 2011: 2, 2015: 1}
uniform resource locators: {1997: 1, 2000: 1, 2015: 3, 2016: 2}
expressive power: {1997: 1, 1998: 1, 1999: 2, 2002: 1, 2004: 1, 2008: 1}
counting circuits: {1997: 2, 1999: 1, 2004: 2, 2006: 1, 2009: 1}
digital simulation: {1997: 1, 1999: 1, 2004: 1, 2008: 2, 2009: 1, 2016: 1}
application domain: {1997: 3, 1999: 3, 2004: 1}
automated reasoning: {1997: 3, 2006: 1, 2013: 1, 2016: 2}
embedded system: {1997: 1, 2003: 1, 2004: 3, 2006: 1, 2008: 1}
domain theory: {1998: 4, 2002: 1, 2013: 2}
software modules: {1998: 2, 2009: 2, 2011: 1, 2012: 2}
condition monitoring: {1998: 1, 2004: 2, 2006: 1, 2009: 3}
application programming: {1998: 1, 2009: 2, 2011: 1, 2016: 2, 2017: 1}
object-oriented applications: {1998: 2, 1999: 1, 2002: 2, 2009: 1, 2015: 1}
change management: {1998: 1, 2008: 2, 2011: 2, 2012: 2}
hierarchical decomposition: {1998: 4, 2011: 3}
object-oriented languages: {1998: 1, 2003: 2, 2008: 1, 2009: 2, 2015: 1}
partial order reduction: {1999: 2, 2000: 1, 2001: 1, 2016: 1, 2017: 2}
association rules: {1999: 1, 2008: 1, 2011: 2, 2013: 3}
recent work: {1999: 1, 2009: 1, 2011: 1, 2015: 1, 2016: 3}
web sites: {1999: 1, 2011: 1, 2013: 1, 2015: 2, 2017: 2}
key challenge: {1999: 1, 2009: 1, 2015: 3, 2017: 2}
programming language semantics: {1999: 2, 2000: 1, 2001: 1, 2002: 2, 2006: 1}
different types: {1999: 1, 2003: 1, 2011: 1, 2015: 1, 2016: 1, 2017: 2}
fault tolerance: {1999: 3, 2000: 1, 2009: 1, 2013: 2}
decision support systems: {1999: 1, 2000: 1, 2008: 1, 2013: 1, 2016: 2, 2017: 1}
test coverage: {2000: 1, 2008: 1, 2009: 1, 2012: 1, 2015: 1, 2017: 2}
high level languages: {2000: 1, 2001: 1, 2003: 2, 2006: 1, 2016: 2}
decision making: {2000: 1, 2004: 1, 2016: 2, 2017: 3}
verification tools: {2000: 1, 2002: 2, 2008: 3, 2015: 1}
web server: {2000: 1, 2003: 1, 2004: 1, 2006: 1, 2008: 2, 2009: 1}
large numbers: {2000: 1, 2003: 1, 2004: 1, 2008: 2, 2009: 1, 2017: 1}
new algorithm: {2000: 1, 2001: 1, 2009: 2, 2012: 1, 2013: 1, 2017: 1}
class operation: {2001: 7}
software model: {2001: 1, 2002: 1, 2006: 1, 2008: 1, 2013: 1, 2017: 2}
domain experts: {2001: 2, 2009: 1, 2012: 1, 2013: 1, 2017: 2}
memory management: {2001: 1, 2008: 1, 2011: 2, 2015: 1, 2016: 2}
several tools: {2001: 2, 2002: 1, 2006: 1, 2008: 2, 2009: 1}
automated tool: {2001: 1, 2009: 2, 2011: 1, 2013: 1, 2015: 2}
formal analysis: {2001: 2, 2004: 5}
graph transformation: {2001: 1, 2002: 1, 2004: 1, 2008: 1, 2009: 1, 2015: 1, 2016: 1}
software architects: {2001: 1, 2008: 2, 2012: 2, 2013: 2}
state machines: {2001: 2, 2008: 2, 2012: 3}
alloy analyzer: {2001: 3, 2008: 2, 2011: 1, 2013: 1}
software programs: {2002: 1, 2008: 1, 2009: 4, 2012: 1}
many approaches: {2002: 1, 2008: 2, 2009: 1, 2012: 2, 2016: 1}
architectural structure: {2002: 2, 2013: 1, 2017: 4}
test oracle: {2003: 2, 2004: 1, 2011: 1, 2016: 3}
gui testing: {2003: 1, 2012: 2, 2016: 3, 2017: 1}
human computer interaction: {2004: 2, 2006: 1, 2008: 1, 2013: 1, 2015: 1, 2017: 1}
run-time monitoring: {2004: 2, 2008: 3, 2011: 2}
conference proceedings: {2004: 1, 2006: 1, 2009: 1, 2013: 1, 2015: 1, 2017: 2}
new tool: {2004: 2, 2006: 2, 2011: 1, 2012: 1, 2013: 1}
product line engineering: {2004: 1, 2008: 2, 2009: 3, 2016: 1}
large amount: {2004: 1, 2009: 1, 2011: 1, 2015: 1, 2016: 2, 2017: 1}
service oriented architecture: {2006: 1, 2008: 1, 2009: 5}
conference management: {2006: 1, 2009: 6}
document object model: {2006: 1, 2013: 1, 2015: 5}
temporal logic formulae: {2008: 7}
load modeling: {2008: 2, 2013: 1, 2017: 4}
recommendation system: {2009: 4, 2015: 1, 2016: 2}
api usage: {2009: 2, 2011: 2, 2013: 2, 2015: 1}
user study: {2009: 1, 2011: 1, 2015: 1, 2016: 2, 2017: 2}
model driven development: {2009: 2, 2011: 3, 2013: 1, 2016: 1}
model-based testing: {2009: 1, 2011: 1, 2013: 1, 2015: 4}
software security: {2009: 2, 2012: 1, 2016: 1, 2017: 3}
bug localization: {2011: 1, 2013: 2, 2015: 3, 2016: 1}
evolutionary coupling: {2011: 1, 2016: 4, 2017: 2}
social networking (online): {2011: 1, 2012: 1, 2013: 1, 2016: 1, 2017: 3}
capacity planning: {2011: 5, 2015: 2}
cascading style sheets: {2011: 1, 2015: 4, 2016: 2}
change impact analysis: {2011: 3, 2012: 1, 2013: 1, 2015: 1, 2016: 1}
genetic programming: {2012: 4, 2013: 2, 2016: 1}
android application: {2012: 3, 2015: 2, 2016: 1, 2017: 1}
combinatorial testing: {2012: 1, 2013: 2, 2016: 4}
concurrency bugs: {2013: 2, 2015: 2, 2016: 2, 2017: 1}
automatic program repair: {2013: 2, 2016: 3, 2017: 2}
edit scripts: {2013: 1, 2015: 3, 2017: 3}
software analytics: {2013: 1, 2015: 1, 2016: 3, 2017: 2}
mobile app: {2015: 2, 2016: 4, 2017: 1}
transfer learning: {2016: 3, 2017: 4}
environmental assumptions: {2017: 7}
target chunk: {2017: 7}
partial programs: {2017: 7}
symbolic states: {2017: 7}
java classes: {2000: 1, 2006: 2, 2013: 2, 2017: 1}
java code: {2000: 1, 2003: 1, 2004: 2, 2011: 2}
software specification: {2002: 2, 1997: 1, 1999: 1, 2001: 2}
spectrum-based fault localization: {2009: 4, 2011: 1, 2012: 1}
several challenges: {2012: 1, 2011: 2, 2015: 2, 2017: 1}
radiation detectors: {2013: 2, 2008: 2, 2015: 1, 2016: 1}
cryptographic protocols: {1997: 1, 1999: 2, 2001: 3}
new method: {1997: 1, 2000: 1, 2002: 1, 2013: 2, 2016: 1}
design optimization: {1997: 1, 1998: 1, 2000: 1, 2001: 1, 2002: 1, 2009: 1}
constraint satisfaction: {1997: 3, 2001: 1, 2006: 2}
programming theory: {1997: 3, 1998: 2, 2000: 1}
knowledge acquisition: {1997: 2, 1998: 2, 2011: 2}
subspace constraints: {1997: 1, 1998: 1, 2009: 2, 2011: 1, 2017: 1}
mechanical factors: {1997: 1, 2000: 1, 2002: 2, 2009: 1, 2015: 1}
concurrent software systems: {1997: 2, 1999: 2, 2016: 2}
power engineering and energy: {1997: 1, 1998: 1, 2000: 1, 2001: 1, 2003: 1, 2006: 1}
reliability engineering: {1997: 1, 2001: 1, 2002: 1, 2003: 2, 2009: 1}
legacy systems: {1997: 1, 1998: 3, 2004: 2}
product design: {1997: 1, 1998: 1, 2006: 4}
postal services: {1997: 1, 1998: 2, 1999: 2, 2013: 1}
data flow: {1997: 1, 2001: 1, 2003: 2, 2016: 2}
object-oriented design: {1997: 1, 2000: 2, 2002: 1, 2006: 1, 2015: 1}
domain analysis: {1997: 1, 2000: 2, 2016: 3}
graphical interface: {1997: 2, 2002: 3, 2017: 1}
program specialization: {1997: 2, 2000: 4}
production facilities: {1998: 1, 2000: 1, 2001: 1, 2008: 2, 2011: 1}
code examples: {1998: 2, 2009: 2, 2017: 2}
message sequence charts: {1998: 1, 2001: 2, 2003: 3}
constraint theory: {1998: 1, 1999: 1, 2001: 1, 2006: 1, 2009: 2}
refinement calculus: {1998: 2, 1999: 2, 2001: 2}
detection algorithms: {1998: 3, 2006: 2, 2013: 1}
exception handling: {1998: 1, 2001: 1, 2006: 1, 2008: 2, 2016: 1}
large software systems: {1998: 1, 2001: 3, 2006: 1, 2008: 1}
time measurement: {1998: 1, 2001: 1, 2009: 1, 2013: 1, 2016: 1, 2017: 1}
distributed object management: {1998: 1, 2001: 1, 2002: 3, 2003: 1}
space vehicles: {1998: 1, 1999: 2, 2000: 1, 2001: 1, 2008: 1}
management of change: {1998: 1, 1999: 1, 2000: 1, 2008: 1, 2011: 2}
empirical software engineering: {1998: 1, 2011: 4, 2012: 1}
cost function: {1998: 1, 2000: 1, 2002: 1, 2006: 1, 2009: 2}
spurious errors: {1998: 5, 2008: 1}
cities and towns: {1998: 1, 2002: 1, 2008: 1, 2009: 1, 2015: 2}
formal concept analysis: {1998: 2, 2004: 2, 2011: 1, 2015: 1}
tree graphs: {1999: 1, 2001: 1, 2004: 1, 2006: 2, 2009: 1}
production environment: {1999: 2, 2009: 3, 2016: 1}
model-based software development: {1999: 1, 2006: 2, 2011: 1, 2012: 1, 2013: 1}
large amounts: {1999: 1, 2009: 1, 2015: 1, 2016: 3}
online front-ends: {1999: 1, 2003: 1, 2004: 1, 2006: 1, 2015: 1, 2017: 1}
first step: {1999: 1, 2006: 1, 2013: 1, 2016: 1, 2017: 2}
distributed software systems: {1999: 2, 2001: 2, 2011: 2}
computer science education: {1999: 1, 2004: 1, 2006: 1, 2008: 1, 2013: 1, 2015: 1}
concept analysis: {1999: 2, 2003: 2, 2004: 2}
abstract models: {1999: 2, 2004: 2, 2011: 2}
genetic mutations: {2000: 1, 2001: 1, 2002: 1, 2006: 1, 2009: 2}
risk management: {2000: 3, 2004: 2, 2015: 1}
fitness function: {2000: 1, 2013: 2, 2015: 3}
constraint logic programming: {2000: 1, 2001: 1, 2002: 1, 2004: 1, 2015: 2}
structural information: {2000: 1, 2006: 2, 2013: 3}
business processes: {2000: 2, 2013: 1, 2017: 3}
state explosion problem: {2000: 2, 2001: 2, 2002: 1, 2013: 1}
computer security: {2000: 1, 2001: 2, 2003: 1, 2009: 1, 2015: 1}
current state: {2001: 2, 2008: 1, 2012: 1, 2013: 1, 2016: 1}
knowledge base: {2001: 3, 2004: 1, 2006: 1, 2016: 1}
management information systems: {2001: 4, 2003: 1, 2009: 1}
java source code: {2001: 2, 2003: 2, 2004: 1, 2006: 1}
system design: {2001: 2, 2002: 2, 2004: 1, 2015: 1}
application framework: {2001: 2, 2002: 3, 2004: 1}
generic approach: {2001: 2, 2008: 1, 2009: 1, 2016: 2}
difficult task: {2001: 1, 2011: 1, 2013: 2, 2017: 2}
software applications: {2001: 1, 2009: 2, 2012: 1, 2013: 1, 2017: 1}
dynamic behavior: {2001: 2, 2002: 3, 2003: 1}
web programs: {2001: 2, 2004: 4}
semantic model: {2001: 4, 2011: 2}
language translation: {2001: 1, 2015: 3, 2016: 1, 2017: 1}
running program: {2001: 1, 2009: 3, 2017: 2}
execution paths: {2001: 1, 2006: 1, 2011: 1, 2013: 1, 2016: 1, 2017: 1}
alloy models: {2001: 1, 2008: 1, 2011: 4}
state explosion: {2002: 3, 2008: 1, 2011: 1, 2015: 1}
collaborative tools: {2002: 1, 2003: 1, 2004: 2, 2009: 2}
design models: {2002: 2, 2006: 1, 2009: 1, 2012: 2}
method calls: {2002: 1, 2015: 2, 2016: 1, 2017: 2}
physics computing: {2002: 1, 2003: 3, 2004: 1, 2009: 1}
requirements monitoring: {2002: 2, 2004: 1, 2011: 1, 2015: 1, 2017: 1}
object-oriented software: {2002: 1, 2004: 2, 2012: 3}
adaptation model: {2002: 1, 2008: 5}
product lines: {2003: 2, 2008: 1, 2009: 1, 2016: 1, 2017: 1}
dynamic approach: {2003: 2, 2004: 2, 2015: 1, 2016: 1}
legacy code: {2003: 3, 2015: 2, 2016: 1}
small number: {2003: 2, 2008: 1, 2012: 1, 2013: 1, 2017: 1}
empirical studies: {2003: 1, 2004: 3, 2009: 1, 2015: 1}
fuzzy set theory: {2003: 1, 2008: 1, 2017: 4}
refactoring tool: {2003: 1, 2012: 1, 2015: 4}
software maintainability: {2003: 1, 2008: 1, 2012: 2, 2013: 1, 2016: 1}
code reuse: {2004: 2, 2011: 1, 2015: 2, 2016: 1}
computer games: {2004: 3, 2011: 1, 2013: 2}
test case execution: {2004: 6}
test suite reduction: {2004: 2, 2009: 2, 2012: 1, 2016: 1}
software-intensive systems: {2004: 5, 2017: 1}
software bugs: {2006: 3, 2013: 2, 2017: 1}
false negatives: {2006: 2, 2012: 2, 2015: 2}
static analyses: {2006: 1, 2015: 3, 2017: 2}
software changes: {2006: 1, 2015: 1, 2016: 3, 2017: 1}
multiple versions: {2006: 1, 2009: 2, 2012: 1, 2013: 2}
invasive software: {2006: 1, 2012: 1, 2013: 2, 2017: 2}
separation logic: {2006: 3, 2011: 3}
model driven engineering: {2006: 1, 2008: 1, 2009: 1, 2013: 2, 2015: 1}
construction industry: {2006: 1, 2008: 5}
integral part: {2008: 1, 2011: 1, 2016: 1, 2017: 3}
real-world programs: {2008: 1, 2009: 1, 2011: 1, 2013: 2, 2017: 1}
simulation languages: {2008: 1, 2009: 2, 2011: 2, 2015: 1}
automatic detection: {2009: 3, 2011: 2, 2012: 1}
api method: {2009: 2, 2011: 1, 2016: 2, 2017: 1}
key insight: {2009: 1, 2011: 1, 2013: 2, 2016: 2}
smt solver: {2009: 2, 2011: 1, 2013: 3}
program code: {2009: 3, 2013: 1, 2017: 2}
actor programs: {2009: 1, 2013: 5}
analysis concerns: {2009: 6}
regular expression: {2009: 1, 2011: 3, 2012: 1, 2017: 1}
open source systems: {2011: 3, 2013: 1, 2016: 1, 2017: 1}
message systems: {2011: 1, 2013: 1, 2015: 1, 2016: 1, 2017: 2}
supervised learning: {2011: 2, 2015: 3, 2017: 1}
feature model: {2011: 5, 2013: 1}
api calls: {2011: 2, 2015: 1, 2017: 3}
mining software repositories: {2011: 1, 2016: 4, 2017: 1}
# x201c: {2011: 1, 2012: 1, 2016: 4}
& # x201c: {2011: 1, 2012: 2, 2013: 1, 2016: 2}
graphical user: {2011: 1, 2012: 2, 2016: 2, 2017: 1}
delta debugging: {2012: 3, 2017: 3}
feature requests: {2013: 2, 2017: 4}
current approaches: {2013: 2, 2015: 3, 2016: 1}
windows phone: {2013: 5, 2015: 1}
javascript applications: {2013: 1, 2017: 5}
deep learning: {2015: 2, 2016: 3, 2017: 1}
statistical machine translation: {2015: 6}
implicit control flow: {2015: 6}
production software: {2016: 3, 2017: 3}
taint analysis: {2016: 5, 2017: 1}
stored procedures: {2016: 6}
symbolic execution tools: {2016: 2, 2017: 4}
symbolic pathfinder: {2016: 2, 2017: 4}
informed decisions: {2016: 1, 2017: 5}
social networks: {2017: 6}
safety properties: {1998: 2, 1999: 2, 2006: 1}
reactive systems: {1998: 1, 2000: 2, 2003: 2}
feature interactions: {1998: 1, 2008: 2, 2011: 2}
index types: {2001: 5}
type system: {2001: 1, 2003: 1, 2008: 1, 2009: 1, 2017: 1}
mobile robots: {2006: 2, 2011: 1, 2013: 1, 2016: 1}
promising results: {2008: 1, 2009: 1, 2012: 1, 2016: 1, 2017: 1}
formal proof: {2009: 2, 2004: 1, 2011: 2}
prior work: {2015: 1, 2002: 1, 2009: 1, 2017: 2}
database languages: {1997: 1, 2003: 1, 2006: 1, 2008: 1, 2017: 1}
legacy software: {1997: 1, 2001: 2, 2017: 2}
best practices: {1997: 2, 2011: 1, 2015: 1, 2017: 1}
software engineering technologies: {1997: 4, 2009: 1}
computer networks: {1997: 1, 2001: 1, 2003: 1, 2004: 1, 2009: 1}
version control: {1997: 2, 2012: 1, 2016: 2}
program transformations: {1997: 2, 1999: 1, 2000: 2}
natural language requirements: {1997: 3, 2009: 2}
target system: {1997: 2, 2008: 2, 2012: 1}
many applications: {1997: 1, 2009: 1, 2012: 1, 2015: 1, 2016: 1}
graph grammars: {1997: 2, 1999: 1, 2003: 1, 2004: 1}
knowledge management: {1997: 1, 2001: 1, 2003: 2, 2009: 1}
human-computer interaction: {1997: 1, 2004: 1, 2008: 2, 2011: 1}
aerospace industry: {1997: 1, 2001: 3, 2006: 1}
constraint optimization: {1997: 1, 1998: 1, 1999: 1, 2001: 1, 2009: 1}
software specifications: {1997: 1, 2004: 2, 2017: 2}
optimising compilers: {1997: 1, 1999: 1, 2001: 1, 2013: 1, 2017: 1}
design automation: {1997: 1, 2000: 1, 2001: 1, 2008: 1, 2013: 1}
database systems: {1997: 1, 2003: 3, 2016: 1}
data engineering: {1997: 1, 1999: 1, 2004: 1, 2006: 2}
business communication: {1997: 1, 2001: 2, 2002: 1, 2004: 1}
component interface: {1997: 4, 1998: 1}
programming environment: {1997: 1, 2009: 3, 2015: 1}
data model: {1998: 1, 2012: 3, 2015: 1}
system documentation: {1998: 2, 2009: 1, 2011: 1, 2015: 1}
verification validation: {1998: 1, 1999: 1, 2001: 1, 2002: 1, 2011: 1}
software application: {1998: 1, 2002: 2, 2011: 1, 2015: 1}
functional testing: {1998: 2, 1999: 1, 2003: 1, 2017: 1}
earlier work: {1998: 1, 2003: 1, 2011: 1, 2013: 1, 2015: 1}
development costs: {1998: 2, 2004: 1, 2008: 2}
predictive model: {1998: 3, 2016: 2}
requirements specifications: {1998: 1, 2001: 1, 2009: 3}
theorem provers: {1998: 1, 1999: 1, 2001: 1, 2016: 2}
software construction: {1998: 1, 2002: 2, 2003: 2}
several ways: {1998: 1, 2002: 1, 2011: 1, 2012: 1, 2017: 1}
manual analysis: {1998: 1, 2008: 1, 2011: 1, 2015: 2}
computer animation: {1998: 1, 2002: 1, 2003: 1, 2008: 1, 2011: 1}
production systems: {1999: 1, 2001: 1, 2002: 1, 2006: 1, 2013: 1}
legal factors: {1999: 1, 2000: 1, 2002: 1, 2008: 1, 2009: 1}
design implementation: {1999: 1, 2008: 1, 2009: 1, 2012: 1, 2017: 1}
component-based software development: {1999: 3, 2004: 2}
computer graphics: {1999: 1, 2004: 2, 2008: 1, 2013: 1}
automatic test generation: {1999: 1, 2003: 1, 2011: 1, 2015: 2}
automatic test software: {1999: 1, 2009: 1, 2011: 1, 2013: 1, 2015: 1}
design rationale: {1999: 1, 2000: 1, 2001: 1, 2008: 2}
automatic logic units: {1999: 1, 2001: 2, 2003: 1, 2006: 1}
computer vision: {1999: 2, 2002: 1, 2015: 2}
software products: {1999: 1, 2011: 2, 2012: 1, 2016: 1}
aerospace control: {1999: 1, 2000: 3, 2001: 1}
electronic commerce: {1999: 2, 2004: 1, 2011: 1, 2017: 1}
recent advances: {1999: 1, 2011: 3, 2016: 1}
major challenge: {1999: 1, 2006: 1, 2011: 1, 2013: 1, 2017: 1}
system analysis and design: {1999: 1, 2002: 1, 2004: 1, 2008: 2}
data flow computing: {1999: 1, 2009: 2, 2011: 1, 2013: 1}
verification techniques: {1999: 1, 2008: 2, 2011: 1, 2017: 1}
file systems: {1999: 1, 2008: 2, 2012: 1, 2013: 1}
c/sup y/nthia: {1999: 5}
technical issues: {1999: 1, 2012: 2, 2017: 2}
important role: {2000: 1, 2008: 1, 2009: 1, 2016: 1, 2017: 1}
smart cards: {2000: 1, 2001: 3, 2004: 1}
information security: {2000: 4, 2009: 1}
real world: {2000: 1, 2006: 1, 2015: 1, 2017: 2}
different levels: {2000: 1, 2001: 1, 2003: 1, 2013: 1, 2015: 1}
program structure: {2000: 1, 2015: 1, 2016: 1, 2017: 2}
class diagrams: {2000: 3, 2001: 1, 2003: 1}
b specifications: {2000: 1, 2001: 4}
object oriented programming: {2000: 2, 2002: 1, 2004: 1, 2009: 1}
structural metrics: {2000: 2, 2002: 2, 2008: 1}
long time: {2001: 1, 2004: 1, 2015: 1, 2016: 1, 2017: 1}
formal specification language: {2001: 3, 2002: 2}
security properties: {2001: 3, 2006: 1, 2013: 1}
ip networks: {2001: 1, 2002: 1, 2003: 1, 2009: 1, 2015: 1}
iterative process: {2001: 1, 2011: 1, 2015: 2, 2017: 1}
code generator: {2001: 2, 2016: 1, 2017: 2}
data handling: {2001: 1, 2006: 1, 2013: 1, 2015: 1, 2016: 1}
formal model: {2001: 2, 2008: 2, 2009: 1}
coverage information: {2001: 1, 2009: 4}
system behavior: {2001: 1, 2004: 2, 2006: 2}
development artifacts: {2001: 2, 2016: 3}
system architecture: {2001: 3, 2004: 1, 2011: 1}
test sequences: {2001: 3, 2004: 1, 2017: 1}
novel framework: {2001: 1, 2006: 1, 2008: 1, 2009: 1, 2011: 1}
integrated software: {2002: 1, 2003: 1, 2009: 2, 2013: 1}
software development life cycle: {2002: 2, 2009: 1, 2012: 2}
first order logic: {2002: 1, 2015: 2, 2016: 2}
generative design patterns: {2002: 1, 2004: 4}
experimental study: {2002: 1, 2004: 3, 2016: 1}
physics-based animation programs: {2002: 3, 2003: 2}
software process improvement: {2002: 1, 2004: 1, 2006: 1, 2011: 1, 2016: 1}
real-world systems: {2002: 1, 2008: 1, 2012: 1, 2015: 2}
requirements validation: {2002: 1, 2003: 1, 2009: 1, 2011: 1, 2016: 1}
tree data structures: {2002: 1, 2006: 1, 2017: 3}
data values: {2002: 2, 2016: 3}
assembly systems: {2002: 1, 2003: 1, 2004: 1, 2006: 1, 2009: 1}
class invariants: {2002: 3, 2008: 1, 2009: 1}
peer to peer computing: {2002: 1, 2006: 1, 2008: 2, 2011: 1}
tree searching: {2003: 3, 2006: 1, 2012: 1}
user preferences: {2003: 2, 2012: 2, 2015: 1}
scientific computing: {2003: 5}
model-driven approach: {2003: 3, 2008: 1, 2012: 1}
automatic test pattern generation: {2003: 1, 2004: 2, 2008: 1, 2011: 1}
two ways: {2003: 1, 2016: 3, 2017: 1}
program invariants: {2003: 4, 2016: 1}
object-oriented programming languages: {2003: 3, 2009: 2}
software refactoring: {2003: 1, 2013: 2, 2015: 1, 2016: 1}
unsatisfiable cores: {2003: 1, 2012: 1, 2016: 3}
parallel algorithms: {2003: 1, 2009: 3, 2016: 1}
fuzzy viewpoints: {2003: 5}
new challenges: {2003: 1, 2004: 1, 2006: 1, 2013: 1, 2016: 1}
computer aided instruction: {2003: 1, 2009: 2, 2013: 1, 2015: 1}
crosscutting concerns: {2004: 2, 2008: 1, 2009: 1, 2011: 1}
code cloning: {2004: 1, 2012: 4}
service-based systems: {2004: 1, 2008: 3, 2013: 1}
integrated development environments: {2004: 1, 2012: 1, 2017: 3}
one hand: {2004: 1, 2011: 2, 2017: 2}
performance requirements: {2004: 1, 2011: 2, 2017: 2}
constraint solving: {2004: 1, 2009: 1, 2016: 2, 2017: 1}
safety verification: {2004: 1, 2008: 1, 2017: 3}
vast amount: {2006: 2, 2011: 1, 2013: 1, 2015: 1}
service-oriented architecture: {2006: 2, 2009: 2, 2017: 1}
buffer overflow: {2006: 1, 2008: 2, 2016: 2}
analysis tools: {2006: 1, 2008: 1, 2016: 1, 2017: 2}
code base: {2006: 2, 2017: 3}
software traceability: {2006: 3, 2017: 2}
concurrent engineering: {2006: 5}
software configuration management: {2006: 4, 2016: 1}
high precision: {2006: 1, 2011: 1, 2015: 2, 2017: 1}
computer crashes: {2006: 1, 2009: 1, 2013: 1, 2017: 2}
software product line engineering: {2006: 1, 2011: 2, 2015: 1, 2016: 1}
variability management: {2006: 1, 2016: 4}
variability models: {2006: 1, 2009: 1, 2011: 1, 2013: 2}
binary codes: {2006: 1, 2009: 1, 2017: 3}
visual contracts: {2006: 2, 2015: 1, 2016: 2}
type inference: {2006: 2, 2009: 1, 2016: 1, 2017: 1}
software developer: {2006: 2, 2011: 2, 2015: 1}
automatic support: {2006: 1, 2008: 1, 2013: 1, 2017: 2}
controlled experiment: {2008: 1, 2011: 1, 2015: 1, 2016: 2}
evolving software: {2008: 4, 2016: 1}
bounded model checking: {2008: 1, 2009: 1, 2013: 1, 2015: 1, 2016: 1}
driver circuits: {2008: 5}
java api: {2008: 1, 2011: 2, 2016: 2}
program states: {2008: 1, 2009: 1, 2017: 3}
frequency modulation: {2008: 1, 2011: 2, 2013: 2}
program variants: {2008: 2, 2013: 2, 2015: 1}
evolutionary testing: {2008: 2, 2012: 3}
feedback loop: {2008: 3, 2012: 2}
combinatorial explosion: {2008: 1, 2016: 3, 2017: 1}
mobile device: {2008: 1, 2012: 2, 2016: 2}
pragmatic reuse tasks: {2008: 2, 2009: 3}
c code: {2008: 2, 2016: 3}
atmospheric modeling: {2008: 1, 2016: 1, 2017: 3}
acceptance testing: {2009: 5}
soft errors: {2009: 5}
client code: {2009: 5}
satisfiability modulo theories: {2009: 1, 2011: 1, 2012: 1, 2013: 1, 2016: 1}
test case prioritization: {2009: 3, 2012: 1, 2016: 1}
domain artifacts: {2009: 5}
real-world applications: {2009: 1, 2013: 1, 2017: 3}
concurrent libraries: {2009: 1, 2015: 4}
library methods: {2009: 1, 2013: 2, 2016: 2}
code reviews: {2009: 1, 2016: 3, 2017: 1}
software faults: {2009: 2, 2011: 2, 2012: 1}
approximation algorithms: {2009: 1, 2011: 2, 2013: 1, 2016: 1}
web developers: {2011: 2, 2013: 1, 2015: 2}
search-based testing: {2011: 3, 2017: 2}
code comments: {2011: 2, 2013: 1, 2015: 2}
transfer functions: {2011: 1, 2015: 3, 2017: 1}
program statement: {2011: 5}
performance prediction: {2011: 1, 2012: 1, 2013: 1, 2015: 2}
software resources: {2011: 5}
model editors: {2011: 3, 2017: 2}
semantic differences: {2011: 5}
complex structures: {2011: 3, 2017: 2}
points-to analysis: {2012: 4, 2016: 1}
requirements engineers: {2012: 2, 2013: 1, 2016: 2}
google play: {2012: 3, 2015: 2}
100 %: {2013: 3, 2016: 2}
concolic execution: {2013: 1, 2015: 1, 2016: 3}
textual description: {2013: 3, 2016: 2}
security vulnerabilities: {2013: 2, 2017: 3}
dangling references: {2013: 5}
incident management: {2013: 5}
many-sorted logic: {2015: 5}
concurrency (computers): {2015: 2, 2016: 2, 2017: 1}
restful apis: {2015: 5}
dependency relations: {2015: 2, 2016: 3}
element locators: {2015: 5}
app developers: {2015: 3, 2016: 1, 2017: 1}
bug detector: {2015: 3, 2016: 2}
api usages: {2015: 5}
modern software development: {2015: 2, 2016: 1, 2017: 2}
android intents: {2015: 4, 2017: 1}
opinion mining: {2015: 2, 2016: 1, 2017: 2}
ui patterns: {2015: 5}
test reports: {2015: 2, 2016: 3}
test smells: {2016: 5}
convolutional neural network: {2016: 5}
neural networks: {2016: 5}
compatibility issues: {2016: 5}
real-world android apps: {2016: 1, 2017: 4}
latent locks: {2016: 5}
cross-language clones: {2016: 5}
video demo: {2016: 1, 2017: 4}
simulink stateflow: {2016: 5}
event data: {2017: 5}
heuristic programming: {1998: 1, 1999: 1, 2003: 1, 2004: 1}
end users: {1998: 1, 2012: 3}
requirements acquisition: {1998: 2, 2002: 2}
component integration: {1999: 1, 1997: 1, 1998: 1, 2009: 1}
proof-carrying code: {2001: 4}
intermediate language: {2001: 1, 2000: 1, 2016: 2}
previous techniques: {2002: 1, 2011: 2, 2017: 1}
belief networks: {2003: 2, 2012: 1, 2013: 1}
classification tree analysis: {2003: 1, 2002: 1, 2004: 1, 2008: 1}
automated teller machine: {2004: 2, 2009: 2}
sensor data: {2006: 4}
object recognition: {2008: 2, 2011: 1, 2016: 1}
visual language: {2008: 1, 2001: 2, 2009: 1}
live sequence charts: {2008: 1, 2003: 2, 2009: 1}
bayesian methods: {2009: 2, 2000: 1, 2011: 1}
bayes methods: {2009: 2, 2008: 1, 2013: 1}
program traces: {2009: 2, 2004: 2}
test generators: {2012: 1, 2016: 1, 2017: 2}
existing solutions: {2013: 2, 2009: 1, 2012: 1}
several times: {2013: 1, 2008: 1, 2011: 1, 2016: 1}
program specification: {2015: 2, 2000: 1, 2004: 1}
temporal specifications: {2015: 3, 2006: 1}
semantic similarity: {2016: 3, 2001: 1}
open source tool: {2017: 2, 2015: 2}
challenging task: {2017: 2, 2015: 1, 2016: 1}
library components: {1997: 3, 1999: 1}
object oriented databases: {1997: 2, 1999: 1, 2003: 1}
network servers: {1997: 1, 2000: 1, 2003: 1, 2006: 1}
runtime environment: {1997: 1, 2002: 1, 2003: 1, 2004: 1}
automatic synthesis: {1997: 1, 1999: 2, 2002: 1}
two kinds: {1997: 1, 1998: 1, 2004: 1, 2011: 1}
data security: {1997: 1, 2000: 1, 2006: 1, 2009: 1}
functional languages: {1997: 1, 1999: 1, 2001: 1, 2003: 1}
modern software systems: {1997: 1, 2006: 1, 2012: 1, 2017: 1}
kestrel interactive development system: {1997: 2, 1999: 2}
information hiding: {1997: 2, 2009: 2}
software portability: {1997: 2, 1998: 1, 2003: 1}
formal approaches: {1997: 2, 1998: 2}
knowledge representation: {1997: 3, 2000: 1}
induction generators: {1997: 1, 2000: 2, 2001: 1}
partial evaluation (compilers): {1997: 3, 2006: 1}
query languages: {1997: 1, 2008: 2, 2017: 1}
important properties: {1997: 1, 1998: 1, 2006: 1, 2009: 1}
hierarchical systems: {1997: 1, 2011: 3}
high levels: {1997: 1, 2000: 1, 2009: 1, 2013: 1}
computer interfaces: {1997: 1, 2000: 1, 2001: 1, 2002: 1}
existing systems: {1997: 1, 1999: 1, 2004: 1, 2013: 1}
key feature: {1997: 1, 1999: 1, 2002: 1, 2008: 1}
case tools: {1998: 1, 2013: 2, 2017: 1}
power engineering computing: {1998: 1, 2000: 1, 2001: 1, 2003: 1}
application generators: {1998: 1, 1999: 1, 2000: 1, 2001: 1}
software development cycle: {1998: 1, 2001: 1, 2009: 2}
software comprehension: {1998: 2, 2003: 1, 2009: 1}
research community: {1998: 1, 2006: 1, 2012: 1, 2016: 1}
electronic equipment testing: {1998: 1, 2001: 1, 2004: 1, 2009: 1}
structural testing: {1998: 2, 2000: 1, 2008: 1}
v & v: {1998: 2, 1999: 1, 2001: 1}
existing programs: {1998: 1, 1999: 1, 2006: 2}
structural testing criteria: {1998: 2, 2001: 2}
virtual machines: {1998: 1, 2000: 1, 2004: 1, 2016: 1}
time factors: {1998: 1, 2004: 1, 2011: 1, 2017: 1}
log files: {1998: 4}
development environment: {1998: 1, 2016: 2, 2017: 1}
conformance testing: {1998: 2, 2001: 1, 2004: 1}
data types: {1998: 2, 2001: 2}
error detection: {1998: 1, 1999: 1, 2013: 1, 2016: 1}
safety-critical applications: {1998: 1, 2002: 2, 2009: 1}
component reuse: {1998: 1, 2011: 2, 2013: 1}
category theory: {1998: 2, 1999: 1, 2003: 1}
little effort: {1998: 1, 2002: 1, 2004: 1, 2011: 1}
symbolic analysis: {1998: 1, 2011: 3}
software development environments: {1998: 2, 2004: 1, 2009: 1}
conceptual architecture: {1998: 3, 2006: 1}
user experience: {1998: 1, 2008: 1, 2012: 1, 2015: 1}
software understanding: {1998: 1, 2001: 1, 2004: 1, 2017: 1}
dynamic evolution: {1998: 2, 1999: 2}
graphical models: {1998: 1, 2013: 2, 2016: 1}
binary decision diagrams: {1999: 1, 2001: 2, 2011: 1}
unified modelling language: {1999: 2, 2001: 2}
spin model: {1999: 1, 2001: 3}
requirements elicitation: {1999: 2, 2003: 1, 2006: 1}
production code: {1999: 2, 2016: 2}
relational database: {1999: 2, 2011: 2}
microsoft word: {1999: 2, 2012: 2}
new techniques: {1999: 1, 2001: 1, 2003: 1, 2017: 1}
system developers: {1999: 2, 2001: 1, 2016: 1}
design flaws: {1999: 2, 2016: 2}
architectural level: {1999: 1, 2001: 2, 2009: 1}
system model: {1999: 2, 2017: 2}
one way: {1999: 1, 2011: 1, 2015: 1, 2017: 1}
given path: {1999: 2, 2002: 2}
distributed databases: {1999: 2, 2017: 2}
software solutions: {1999: 2, 2009: 1, 2012: 1}
theorem prover: {1999: 1, 2003: 2, 2016: 1}
human effort: {1999: 1, 2015: 1, 2017: 2}
electrical equipment industry: {1999: 2, 2004: 1, 2006: 1}
formal definition: {1999: 2, 2001: 1, 2009: 1}
test automation: {1999: 3, 2004: 1}
run-time analysis: {2000: 2, 2006: 2}
textual argumentation: {2000: 2, 2003: 2}
object-oriented framework: {2000: 2, 2004: 2}
important concepts: {2000: 4}
program transformation: {2000: 1, 2009: 1, 2011: 1, 2015: 1}
content addressable storage: {2000: 1, 2001: 2, 2004: 1}
monte carlo methods: {2000: 1, 2008: 1, 2009: 1, 2017: 1}
diagnostic performance: {2000: 4}
automated database design tools: {2000: 4}
graph transformations: {2000: 2, 2001: 2}
architectural transformations: {2000: 1, 2001: 3}
dynamic information: {2000: 1, 2002: 1, 2013: 2}
parallel languages: {2000: 1, 2004: 1, 2008: 1, 2009: 1}
black box: {2000: 1, 2004: 1, 2015: 2}
/spl pi/-space: {2000: 4}
safety critical software: {2000: 2, 2001: 1, 2003: 1}
research and development: {2000: 1, 2002: 1, 2009: 1, 2016: 1}
design phase: {2000: 1, 2002: 1, 2006: 1, 2013: 1}
model elements: {2000: 1, 2017: 3}
supporting tools: {2000: 3, 2009: 1}
calling-called dependency: {2001: 4}
b operation: {2001: 4}
design model: {2001: 1, 2008: 2, 2015: 1}
model-driven architecture: {2001: 1, 2009: 3}
interleaved codes: {2001: 3, 2009: 1}
partial-order reduction: {2001: 1, 2011: 1, 2012: 1, 2015: 1}
java bytecode: {2001: 1, 2006: 2, 2009: 1}
latent semantic indexing: {2001: 2, 2011: 2}
distributed algorithms: {2001: 1, 2002: 3}
strengths weaknesses: {2001: 1, 2006: 1, 2009: 1, 2015: 1}
java programming language: {2001: 2, 2003: 2}
practical application: {2001: 2, 2003: 1, 2015: 1}
software agent: {2001: 2, 2006: 2}
software validation: {2001: 1, 2006: 1, 2017: 2}
automated test data generation: {2001: 3, 2011: 1}
design coverage: {2001: 4}
web and internet services: {2001: 1, 2003: 2, 2009: 1}
abstract state machines: {2001: 4}
access protocols: {2001: 1, 2003: 2, 2008: 1}
common electronic purse specifications: {2001: 2, 2006: 2}
quality models: {2001: 2, 2002: 1, 2015: 1}
large scale integration: {2001: 1, 2008: 2, 2011: 1}
software lifecycle: {2001: 2, 2002: 2}
software industry: {2001: 2, 2004: 2}
state estimation: {2001: 2, 2002: 1, 2009: 1}
security requirements: {2001: 1, 2008: 1, 2009: 1, 2012: 1}
life testing: {2001: 1, 2002: 2, 2004: 1}
rapid prototyping: {2001: 2, 2002: 1, 2011: 1}
general framework: {2001: 1, 2006: 1, 2009: 1, 2015: 1}
action language: {2001: 4}
control flow graph: {2001: 1, 2006: 1, 2008: 2}
enabling technology: {2001: 2, 2006: 1, 2009: 1}
correctness criteria: {2001: 4}
several case studies: {2001: 1, 2004: 1, 2006: 1, 2009: 1}
new kind: {2002: 1, 2009: 1, 2012: 1, 2015: 1}
character generation: {2002: 1, 2003: 1, 2004: 1, 2009: 1}
automated theorem proving: {2002: 1, 2011: 1, 2015: 2}
testing process: {2002: 2, 2003: 1, 2009: 1}
error-prone task: {2002: 2, 2015: 1, 2016: 1}
design space: {2002: 2, 2011: 1, 2015: 1}
small set: {2002: 1, 2004: 1, 2015: 1, 2017: 1}
dependence management: {2002: 4}
educational programs: {2002: 1, 2003: 2, 2004: 1}
69 %: {2002: 1, 2006: 1, 2011: 1, 2016: 1}
stakeholder requirements: {2002: 2, 2004: 1, 2009: 1}
component-based development: {2002: 1, 2003: 2, 2015: 1}
hybrid automata: {2003: 4}
multiple tools: {2003: 2, 2011: 1, 2017: 1}
information needs: {2003: 1, 2016: 3}
formal language: {2003: 2, 2011: 2}
binary class relationships: {2003: 4}
abstract model: {2003: 2, 2004: 1, 2008: 1}
propositional logic: {2003: 2, 2009: 2}
operational abstractions: {2003: 4}
test executions: {2003: 1, 2013: 1, 2016: 2}
existing test suite: {2003: 1, 2008: 1, 2011: 2}
sat solvers: {2003: 2, 2011: 1, 2015: 1}
declarative models: {2003: 1, 2011: 3}
oracle information: {2003: 4}
feature signatures: {2003: 4}
evolving programs: {2003: 1, 2008: 1, 2012: 2}
proposed research: {2003: 2, 2004: 1, 2011: 1}
image processing: {2003: 1, 2013: 1, 2016: 2}
inconsistency detection: {2003: 1, 2012: 2, 2016: 1}
model-based development: {2003: 2, 2015: 2}
promising approach: {2003: 1, 2011: 1, 2013: 1, 2017: 1}
symbolic model checker: {2003: 1, 2004: 2, 2011: 1}
database application: {2003: 1, 2011: 3}
automated tools: {2003: 2, 2016: 2}
requirements specification: {2003: 1, 2004: 3}
computational framework: {2004: 4}
system analysis: {2004: 1, 2006: 1, 2011: 2}
application development: {2004: 4}
traceability relations: {2004: 2, 2008: 2}
size measurement: {2004: 1, 2011: 1, 2016: 2}
web servers: {2004: 2, 2009: 1, 2017: 1}
modeling formalism: {2004: 1, 2015: 3}
specific properties: {2004: 2, 2013: 1, 2016: 1}
aspect-oriented design: {2004: 2, 2006: 2}
architectural evolution: {2004: 4}
architectural design decisions: {2004: 1, 2008: 3}
method invocations: {2004: 2, 2013: 1, 2017: 1}
redundant tests: {2004: 4}
fault tolerant computing: {2004: 1, 2012: 1, 2013: 1, 2016: 1}
framework-based software: {2004: 2, 2006: 2}
development method: {2004: 2, 2013: 2}
context awareness: {2004: 1, 2006: 1, 2009: 2}
welcome message: {2004: 1, 2006: 1, 2009: 1, 2013: 1}
static program analysis: {2004: 1, 2006: 1, 2016: 2}
depth-first search: {2004: 1, 2006: 2, 2012: 1}
mission-critical systems: {2004: 2, 2013: 2}
requirement engineering: {2006: 2, 2009: 1, 2011: 1}
application code: {2006: 1, 2011: 1, 2015: 2}
bug fixing: {2006: 1, 2011: 1, 2016: 2}
bug-introducing changes: {2006: 4}
architectural modeling: {2006: 2, 2008: 2}
apache ant: {2006: 2, 2009: 2}
source code analysis: {2006: 1, 2009: 1, 2013: 2}
software model checkers: {2006: 1, 2008: 1, 2011: 1, 2017: 1}
usability testing: {2006: 2, 2016: 1, 2017: 1}
application logic: {2006: 2, 2016: 2}
communicative acts: {2006: 4}
error-prone process: {2006: 1, 2015: 2, 2016: 1}
pointer programs: {2006: 2, 2011: 1, 2017: 1}
existing methods: {2006: 1, 2015: 1, 2016: 2}
current practice: {2006: 1, 2011: 1, 2015: 2}
software system development: {2006: 3, 2008: 1}
eclipse platform: {2006: 2, 2017: 2}
open source tools: {2008: 2, 2009: 2}
unit tests: {2008: 3, 2017: 1}
predicate abstraction: {2008: 4}
ranked list: {2008: 1, 2009: 1, 2012: 1, 2016: 1}
context-free grammars: {2008: 2, 2013: 1, 2016: 1}
alloy tool-set: {2008: 2, 2011: 2}
generic bugs: {2008: 2, 2017: 2}
product development: {2008: 2, 2011: 2}
verisec suite: {2008: 4}
error handling code: {2008: 1, 2016: 3}
modelling language: {2008: 2, 2009: 1, 2017: 1}
concolic testing: {2008: 1, 2013: 3}
code clones: {2008: 1, 2009: 2, 2013: 1}
cyber-physical systems: {2008: 1, 2015: 3}
program locations: {2009: 2, 2017: 2}
code constructs: {2009: 2, 2013: 2}
java systems: {2009: 1, 2012: 2, 2016: 1}
third-party libraries: {2009: 1, 2013: 1, 2016: 2}
development tasks: {2009: 1, 2017: 3}
dp industry: {2009: 1, 2011: 1, 2013: 1, 2016: 1}
main challenge: {2009: 1, 2011: 2, 2016: 1}
programming rules: {2009: 3, 2016: 1}
real bugs: {2009: 1, 2011: 1, 2016: 1, 2017: 1}
hidden markov models: {2009: 2, 2015: 2}
hidden markov model: {2009: 2, 2015: 2}
98 %: {2009: 1, 2015: 2, 2016: 1}
runtime data: {2009: 2, 2012: 2}
recommendation systems: {2009: 1, 2015: 2, 2017: 1}
online services: {2009: 2, 2013: 2}
storage management: {2009: 1, 2011: 1, 2016: 1, 2017: 1}
data race: {2009: 1, 2015: 2, 2016: 1}
testing tools: {2009: 1, 2012: 1, 2016: 1, 2017: 1}
path exploration: {2009: 2, 2016: 2}
complex regular expressions: {2009: 4}
cost accounting: {2009: 1, 2013: 1, 2016: 1, 2017: 1}
api documents: {2009: 4}
error prone: {2009: 1, 2011: 1, 2012: 1, 2013: 1}
software documentation: {2009: 1, 2011: 3}
pointcut fragility: {2009: 2, 2015: 2}
social network services: {2009: 1, 2013: 1, 2016: 1, 2017: 1}
structural constraints: {2009: 3, 2011: 1}
transformation rules: {2009: 2, 2011: 1, 2012: 1}
multiple faults: {2009: 3, 2012: 1}
debugging process: {2009: 2, 2013: 2}
state space explosion problem: {2009: 2, 2015: 2}
software visualization: {2011: 1, 2016: 3}
html page: {2011: 4}
php code: {2011: 3, 2015: 1}
server-side code: {2011: 1, 2012: 3}
symbol manipulation: {2011: 3, 2015: 1}
multithreaded program: {2011: 2, 2012: 1, 2016: 1}
cache storage: {2011: 2, 2016: 2}
observed run: {2011: 4}
false alarms: {2011: 2, 2013: 1, 2016: 1}
algorithmic debugging: {2011: 4}
program statements: {2011: 2, 2016: 2}
vector space model: {2011: 3, 2016: 1}
multiple search techniques: {2011: 4}
buggy files: {2011: 3, 2015: 1}
buggy code: {2011: 3, 2015: 1}
source files: {2011: 1, 2015: 3}
markov processes: {2011: 2, 2015: 1, 2017: 1}
analysis results: {2011: 2, 2015: 1, 2017: 1}
boolean expressions: {2011: 4}
feature-aware verification: {2011: 4}
search results: {2011: 3, 2015: 1}
calling relationships: {2011: 1, 2012: 3}
web search: {2011: 4}
stateful testing: {2011: 4}
learning curve: {2011: 1, 2015: 2, 2017: 1}
structured information: {2011: 3, 2013: 1}
diagnostic procedures: {2011: 4}
faulty statements: {2011: 2, 2015: 2}
maintenance tasks: {2011: 4}
linear regression: {2011: 3, 2013: 1}
model queries: {2011: 2, 2013: 2}
data acquisition: {2011: 1, 2013: 3}
lexical information: {2011: 2, 2017: 2}
electrical engineering: {2012: 3, 2016: 1}
manual labeling: {2012: 2, 2015: 1, 2016: 1}
private data: {2012: 3, 2016: 1}
text retrieval: {2012: 3, 2015: 1}
software models: {2012: 2, 2013: 2}
recent studies: {2012: 1, 2015: 2, 2017: 1}
code clone detection: {2012: 2, 2016: 2}
semi-supervised learning: {2012: 4}
appropriate healing action: {2012: 4}
robustness testing: {2012: 1, 2013: 2, 2017: 1}
one another: {2012: 2, 2015: 1, 2017: 1}
weave droid: {2012: 4}
privacy policies: {2012: 2, 2017: 2}
c++ code: {2012: 2, 2015: 2}
existing work: {2012: 1, 2013: 1, 2015: 1, 2016: 1}
dynamic language: {2012: 2, 2013: 2}
scalability issues: {2012: 1, 2013: 1, 2016: 2}
description logic: {2012: 3, 2017: 1}
bad smells: {2012: 4}
concurrent data structures: {2013: 4}
dacapo benchmark: {2013: 2, 2015: 2}
flow-based parallelism: {2013: 4}
code elements: {2013: 2, 2017: 2}
api methods: {2013: 2, 2016: 2}
program activity: {2013: 2, 2015: 2}
compile time: {2013: 4}
data states: {2013: 2, 2015: 1, 2016: 1}
sota analysis tools: {2013: 4}
code repositories: {2013: 1, 2017: 3}
concurrent software: {2013: 1, 2016: 1, 2017: 2}
question answering (information retrieval): {2013: 1, 2016: 1, 2017: 2}
q & amp: {2013: 2, 2015: 2}
user feedback: {2013: 2, 2015: 2}
consistency failure: {2013: 4}
different platforms: {2013: 1, 2016: 2, 2017: 1}
flow permissions: {2013: 4}
natural language processing techniques: {2013: 2, 2017: 2}
service selection: {2013: 2, 2017: 2}
database tables: {2015: 2, 2016: 2}
graph transformation rules: {2015: 2, 2016: 2}
average precision: {2015: 2, 2016: 2}
sir repository: {2015: 2, 2016: 2}
user query: {2015: 2, 2017: 2}
software as a service: {2015: 2, 2017: 2}
model variants: {2015: 3, 2016: 1}
software performance engineering: {2015: 2, 2017: 2}
ordinary differential equations: {2015: 2, 2017: 2}
test names: {2015: 2, 2016: 2}
/sub >: {2015: 4}
phrase-based smt: {2015: 4}
access paths: {2015: 4}
java reflection: {2015: 4}
systems of systems: {2015: 2, 2017: 2}
user reviews: {2015: 3, 2016: 1}
sentiment analysis: {2015: 1, 2016: 1, 2017: 2}
software reviews: {2015: 2, 2016: 2}
program coverage: {2016: 4}
integer programming: {2016: 3, 2017: 1}
cache misses: {2016: 4}
word embeddings: {2016: 4}
semantic relatedness: {2016: 2, 2017: 2}
neural nets: {2016: 3, 2017: 1}
lexical gap: {2016: 3, 2017: 1}
surrogate modeling: {2016: 4}
sensitive data: {2016: 2, 2017: 2}
crowdsourced testing: {2016: 4}
active learning: {2016: 3, 2017: 1}
static code analysis: {2016: 4}
faulty functions: {2016: 4}
code issues: {2016: 3, 2017: 1}
concurrency bug: {2016: 3, 2017: 1}
big data: {2016: 1, 2017: 3}
original data source: {2016: 4}
edit script: {2016: 3, 2017: 1}
dual-language vector space: {2016: 4}
pull request: {2016: 3, 2017: 1}
tool demonstration video: {2016: 2, 2017: 2}
analogical libraries: {2016: 4}
given task: {2016: 3, 2017: 1}
software source code: {2017: 4}
missing links: {2017: 4}
interrupt handlers: {2017: 4}
interrupt-driven software: {2017: 4}
heap overflow: {2017: 4}
initial query: {2017: 4}
configuration languages: {2017: 4}
partial program: {2017: 4}
unknown code names: {2017: 4}
usage-based statistical testing: {2017: 4}
wifi p2p: {2017: 4}
traditional software metrics: {2017: 4}
traceable patterns: {2017: 4}
abstract objects: {1997: 2, 2013: 1}
data encapsulation: {1997: 2, 1998: 1}
requirements analysts: {1998: 1, 2003: 2}
large class: {1998: 1, 2003: 1, 2013: 1}
component retrieval: {1999: 2, 1997: 1}
problem specification: {1999: 2, 2002: 1}
adaptation classes: {2000: 3}
declarative approach: {2000: 2, 2003: 1}
computational resources: {2001: 1, 2009: 1, 2016: 1}
control software: {2002: 2, 1999: 1}
sensor systems: {2002: 1, 2004: 1, 2006: 1}
deviation analysis: {2002: 3}
model checking techniques: {2002: 1, 1997: 1, 2009: 1}
verification task: {2002: 1, 1998: 1, 2001: 1}
prediction accuracy: {2003: 2, 2008: 1}
use case models: {2004: 3}
inter-object language: {2008: 1, 2009: 2}
spectrum based fault localization: {2009: 2, 2011: 1}
behavioral model: {2009: 1, 2003: 1, 2004: 1}
faulty components: {2009: 1, 2017: 2}
model versioning: {2011: 1, 2012: 1, 2013: 1}
low-level differences: {2011: 3}
editing operations: {2011: 3}
dynamic analyses: {2013: 2, 2017: 1}
empirical comparison: {2013: 1, 2008: 1, 2017: 1}
ltl formula: {2015: 1, 2001: 1, 2016: 1}
query reformulation: {2016: 1, 2015: 1, 2017: 1}
large variety: {2017: 2, 2011: 1}
two approaches: {2017: 1, 2001: 1, 2013: 1}
liveness properties: {1997: 2, 2011: 1}
adaptation effort: {1997: 3}
spatial databases: {1997: 1, 2003: 2}
query language: {1997: 1, 2017: 2}
component models: {1997: 1, 2002: 1, 2015: 1}
knowledge-based systems: {1997: 3}
key factor: {1997: 1, 2009: 1, 2017: 1}
carbon capture and storage: {1997: 1, 1998: 1, 2004: 1}
vdm-sl specification: {1997: 1, 2002: 2}
interface design: {1997: 2, 2008: 1}
executable specification: {1997: 2, 2006: 1}
automated software verification: {1997: 1, 2011: 2}
hosted software: {1997: 3}
service providers: {1997: 1, 2001: 2}
automated theorem prover: {1997: 2, 1998: 1}
development lifecycle: {1997: 2, 1999: 1}
case-based reasoning: {1997: 1, 2002: 2}
program development: {1997: 1, 2003: 1, 2008: 1}
specification formalism: {1997: 1, 2009: 2}
numerical analysis: {1997: 1, 1999: 1, 2001: 1}
numerical programs: {1997: 2, 2002: 1}
manual coding: {1997: 2, 2004: 1}
novel way: {1997: 1, 2001: 1, 2017: 1}
reuse techniques: {1997: 3}
human intervention: {1997: 2, 2012: 1}
failure analysis: {1997: 1, 1999: 1, 2009: 1}
proof search: {1997: 2, 2001: 1}
practical use: {1997: 1, 2016: 1, 2017: 1}
procedural code: {1997: 1, 2012: 2}
domain engineering: {1997: 2, 2000: 1}
business context: {1997: 1, 2009: 2}
several examples: {1997: 1, 2001: 1, 2012: 1}
semantic analysis: {1997: 1, 1998: 2}
inductive proofs: {1997: 2, 2017: 1}
principal component analysis: {1997: 1, 2011: 2}
design stages: {1997: 3}
environmental cues: {1997: 3}
safety-critical system: {1997: 2, 2015: 1}
visual basic: {1997: 2, 2004: 1}
fuzzy logic: {1997: 1, 2000: 1, 2008: 1}
combinatorial optimization: {1997: 1, 1998: 2}
independent component analysis: {1997: 1, 2002: 1, 2003: 1}
large complex systems: {1997: 1, 1999: 1, 2015: 1}
user queries: {1997: 2, 2011: 1}
software processes: {1997: 1, 2000: 1, 2008: 1}
inputs outputs: {1997: 1, 2004: 1, 2006: 1}
alias analysis: {1997: 1, 1998: 2}
compound type changes: {1997: 3}
data processing: {1997: 1, 2013: 1, 2015: 1}
main problem: {1997: 1, 2009: 1, 2017: 1}
design level: {1997: 1, 2001: 1, 2006: 1}
automatic technique: {1997: 1, 2011: 1, 2012: 1}
acoustic testing: {1997: 1, 1998: 1, 2004: 1}
information management: {1997: 1, 2009: 2}
c++ programs: {1997: 1, 1998: 1, 2009: 1}
communicating systems: {1998: 3}
msc specifications: {1998: 3}
message sequence chart: {1998: 1, 2003: 2}
automated synthesis: {1998: 1, 1999: 2}
generated programs: {1998: 3}
power generation: {1998: 1, 2001: 1, 2006: 1}
implementation decisions: {1998: 1, 2012: 1, 2017: 1}
development cycle: {1998: 1, 2013: 2}
software process models: {1998: 1, 2009: 2}
conjunctive predicates: {1998: 3}
distributed program: {1998: 2, 2016: 1}
global predicates: {1998: 3}
distributed programs: {1998: 1, 2013: 1, 2016: 1}
utility model: {1998: 3}
software project management: {1998: 1, 2015: 2}
white-box testing: {1998: 3}
coverage analysis: {1998: 2, 2012: 1}
optimal combination: {1998: 1, 2017: 2}
component libraries: {1998: 2, 2006: 1}
entire process: {1998: 1, 2004: 1, 2011: 1}
prototype tool-set: {1998: 3}
efficiency effectiveness: {1998: 1, 2004: 1, 2011: 1}
real application: {1998: 1, 2008: 1, 2016: 1}
tool framework: {1998: 1, 2016: 2}
effective means: {1998: 1, 2011: 1, 2016: 1}
semi-automated tool: {1998: 2, 2008: 1}
defect detection: {1998: 1, 2002: 1, 2004: 1}
program correctness: {1998: 1, 2001: 2}
q factor: {1998: 1, 2002: 2}
software development projects: {1998: 1, 2004: 2}
complex programs: {1998: 1, 2013: 2}
c/c++ programs: {1998: 1, 2009: 2}
complex software systems: {1998: 1, 2011: 1, 2015: 1}
tool-based approach: {1998: 2, 2011: 1}
java libraries: {1998: 2, 2009: 1}
automated reverse engineering: {1998: 1, 2012: 2}
automated abstraction: {1998: 1, 2000: 2}
application programming interfaces: {1998: 1, 2009: 1, 2011: 1}
coverage conditions: {1998: 3}
synchronization constraints: {1998: 3}
semantic properties: {1998: 1, 2013: 2}
concrete example: {1998: 1, 2001: 1, 2003: 1}
software architecture design: {1998: 2, 2011: 1}
cycle time: {1998: 2, 2016: 1}
software change: {1998: 1, 2017: 2}
software development project: {1998: 1, 2002: 2}
true errors: {1998: 3}
software properties: {1998: 1, 2013: 2}
statement view: {1998: 3}
software development environment: {1998: 1, 2012: 2}
user questions: {1998: 3}
user model: {1998: 2, 2011: 1}
workflow management software: {1998: 1, 2009: 2}
dynamic workflow process evolution: {1998: 3}
automatic test data selection: {1998: 3}
specification validation: {1998: 2, 2001: 1}
specification verification: {1998: 2, 2006: 1}
underlying formalism: {1998: 1, 1999: 1, 2009: 1}
global context: {1998: 2, 2011: 1}
safety property: {1999: 2, 2006: 1}
spin model checker: {1999: 1, 2001: 2}
uml sequence diagram: {1999: 1, 2000: 2}
activity theory: {1999: 3}
hardware design languages: {1999: 1, 2000: 1, 2006: 1}
safety critical applications: {1999: 2, 2016: 1}
program synthesis system: {1999: 2, 2002: 1}
incomplete knowledge: {1999: 1, 2008: 1, 2013: 1}
many cases: {1999: 1, 2009: 1, 2017: 1}
jacobian matrices: {1999: 2, 2009: 1}
communication system control: {1999: 1, 2009: 2}
detection correction: {1999: 2, 2001: 1}
program fragments: {1999: 2, 2002: 1}
theorem proving techniques: {1999: 3}
formal notation: {1999: 2, 2001: 1}
model generation: {1999: 3}
latent semantic analysis: {1999: 3}
initial results: {1999: 1, 2000: 1, 2013: 1}
microwave integrated circuits: {1999: 1, 2003: 1, 2009: 1}
scientific programs: {1999: 3}
mission critical systems: {1999: 1, 2002: 1, 2004: 1}
distributed information systems: {1999: 3}
dynamic environment: {1999: 1, 2001: 1, 2012: 1}
program performance: {1999: 1, 2002: 2}
program generation: {1999: 1, 2016: 2}
optimization opportunities: {1999: 1, 2002: 2}
multiple layers: {1999: 2, 2017: 1}
separation of concerns: {1999: 1, 2011: 1, 2012: 1}
design documents: {1999: 2, 2003: 1}
architectural view: {1999: 2, 2011: 1}
computer applications: {1999: 3}
confidential information: {1999: 2, 2017: 1}
partial information: {1999: 2, 2003: 1}
execution data: {1999: 1, 2013: 2}
great deal: {1999: 1, 2003: 1, 2015: 1}
testing environment: {1999: 1, 2000: 1, 2008: 1}
input generation: {1999: 1, 2011: 1, 2015: 1}
system reliability: {1999: 2, 2017: 1}
pilot studies: {1999: 3}
critical systems: {1999: 2, 2011: 1}
time effort: {1999: 1, 2003: 1, 2011: 1}
automated test oracles: {1999: 1, 2004: 2}
security protocols: {1999: 2, 2001: 1}
support environment: {1999: 1, 2001: 2}
architectural design: {1999: 1, 2004: 2}
design effort: {1999: 3}
necessary properties: {1999: 1, 2013: 2}
dynamic change management: {1999: 3}
automatic analysis: {1999: 1, 2000: 1, 2012: 1}
whole system: {1999: 1, 2011: 1, 2012: 1}
shared memory systems: {1999: 1, 2003: 1, 2015: 1}
text editing: {1999: 1, 2001: 1, 2017: 1}
program extraction: {1999: 1, 2001: 2}
functional programming language: {1999: 1, 2001: 2}
architectural synthesis: {1999: 3}
component-based software engineering: {1999: 2, 2011: 1}
time to market: {1999: 1, 2000: 1, 2001: 1}
regular expressions: {1999: 1, 2011: 1, 2017: 1}
time scale: {1999: 3}
virtual machining: {2000: 1, 2002: 1, 2004: 1}
java virtual machine: {2000: 1, 2004: 2}
run-time analysis techniques: {2000: 1, 2011: 2}
natural language interfaces: {2000: 1, 2011: 1, 2017: 1}
semantic network: {2000: 3}
traditional methods: {2000: 1, 2016: 1, 2017: 1}
traditional approaches: {2000: 1, 2004: 1, 2015: 1}
new version: {2000: 1, 2002: 1, 2011: 1}
upgrade behavior: {2000: 1, 2017: 2}
program comparison: {2000: 2, 2003: 1}
software engineering process: {2000: 1, 2003: 2}
corrective predicate: {2000: 3}
circular coinductive rewriting: {2000: 3}
ground confluence: {2000: 3}
visual languages: {2000: 1, 2001: 1, 2003: 1}
large-scale what-if queries: {2000: 3}
software cost estimation: {2000: 1, 2008: 1, 2011: 1}
deductive databases: {2000: 2, 2004: 1}
certain aspects: {2000: 1, 2001: 1, 2009: 1}
executable specifications: {2000: 2, 2003: 1}
graph rewriting: {2000: 3}
mental model: {2000: 1, 2003: 2}
specialization patterns: {2000: 2, 2004: 1}
test generation tool: {2000: 2, 2008: 1}
declarative language: {2000: 1, 2011: 2}
software configuration: {2000: 1, 2008: 1, 2012: 1}
different properties: {2000: 1, 2011: 2}
evolving software systems: {2000: 1, 2003: 1, 2011: 1}
key role: {2000: 1, 2015: 2}
security updates: {2000: 3}
partial order: {2000: 3}
update operations: {2000: 1, 2001: 2}
data intensive applications: {2000: 1, 2013: 2}
basic update operations: {2000: 1, 2001: 2}
virtual prototyping: {2000: 1, 2001: 1, 2002: 1}
object-oriented system: {2000: 1, 2003: 2}
sequence diagram: {2000: 1, 2016: 2}
video camera metaphor: {2000: 3}
risk mitigation data: {2000: 3}
different phases: {2000: 1, 2011: 1, 2013: 1}
group critic system: {2000: 3}
critiquing system: {2000: 3}
galois lattice: {2000: 3}
system level: {2001: 1, 2002: 1, 2012: 1}
automatic translation: {2001: 3}
b abstract machine: {2001: 3}
class operations: {2001: 3}
use cases: {2001: 1, 2016: 1, 2017: 1}
redundant code: {2001: 2, 2009: 1}
modeling tools: {2001: 2, 2013: 1}
automated verification tool: {2001: 2, 2006: 1}
software certification: {2001: 2, 2006: 1}
safety policies: {2001: 2, 2003: 1}
phase detection: {2001: 3}
formal specification languages: {2001: 3}
nl requirements: {2001: 2, 2008: 1}
vienna development method: {2001: 1, 2002: 2}
rendering (computer graphics): {2001: 1, 2004: 1, 2006: 1}
formal reasoning: {2001: 2, 2006: 1}
higher order functions: {2001: 3}
requirements analysis phase: {2001: 1, 2016: 2}
hierarchical structure: {2001: 2, 2015: 1}
well-known technique: {2001: 1, 2006: 1, 2012: 1}
information retrieval technique: {2001: 2, 2015: 1}
iterative technique: {2001: 2, 2012: 1}
partial order information: {2001: 3}
static analyzer: {2001: 1, 2009: 2}
test purposes: {2001: 3}
module cohesion: {2001: 3}
several programs: {2001: 1, 2003: 1, 2006: 1}
multiple logical foundations: {2001: 3}
patient monitoring: {2001: 1, 2008: 1, 2009: 1}
groupware support: {2001: 2, 2003: 1}
requirement documents: {2001: 2, 2013: 1}
concurrent class machines: {2001: 3}
method invocation: {2001: 1, 2012: 2}
product line architectures: {2001: 2, 2011: 1}
xml descriptor: {2001: 3}
complex message translations: {2001: 3}
electronic messaging: {2001: 1, 2003: 1, 2006: 1}
context-aware browsing: {2001: 3}
design requirements: {2001: 3}
code coverage tools: {2001: 3}
test engineer: {2001: 2, 2012: 1}
explicit-state model checking: {2001: 1, 2009: 2}
model checkers: {2001: 1, 2011: 1, 2015: 1}
ltl specifications: {2001: 1, 2011: 2}
multiple clients: {2001: 2, 2013: 1}
traditional interactive programs: {2001: 3}
tar2 treatment learner: {2001: 1, 2002: 2}
stochastic processes: {2001: 1, 2002: 1, 2011: 1}
uml model: {2001: 2, 2017: 1}
static dynamic aspects: {2001: 2, 2003: 1}
input language: {2001: 2, 2012: 1}
error traces: {2001: 1, 2006: 2}
quality modeling: {2001: 2, 2012: 1}
integration framework: {2001: 3}
larger software systems: {2001: 3}
larger systems: {2001: 1, 2002: 1, 2011: 1}
domain-specific deductive program synthesis: {2001: 3}
specific solver: {2001: 2, 2011: 1}
compiler generators: {2001: 1, 2003: 2}
input sequences: {2001: 2, 2012: 1}
automated specification-based testing: {2001: 1, 2004: 2}
human tester: {2001: 2, 2008: 1}
past years: {2001: 1, 2004: 1, 2006: 1}
probability distribution: {2001: 1, 2013: 1, 2017: 1}
constraint solver: {2001: 1, 2011: 2}
automatic test data generation: {2001: 1, 2003: 1, 2008: 1}
ebox consistency: {2001: 3}
path coverage: {2001: 3}
consistency techniques: {2001: 3}
path constraints: {2001: 1, 2017: 2}
modular approach: {2002: 1, 2012: 2}
run-time adaptation: {2002: 1, 2015: 2}
consistency rules: {2002: 2, 2008: 1}
real execution: {2002: 3}
abstract level: {2002: 2, 2009: 1}
application behavior: {2002: 1, 2011: 1, 2013: 1}
mutual exclusion: {2002: 3}
modeling language: {2002: 1, 2003: 1, 2006: 1}
multiagent systems: {2002: 1, 2006: 1, 2008: 1}
multi-agent system: {2002: 1, 2006: 1, 2008: 1}
recent developments: {2002: 1, 2008: 1, 2013: 1}
program inputs: {2002: 1, 2011: 2}
extraterrestrial measurements: {2002: 1, 2013: 1, 2016: 1}
test specification: {2002: 2, 2009: 1}
java applications: {2002: 2, 2009: 1}
test stubs: {2002: 1, 2009: 2}
pre- postconditions: {2002: 1, 2012: 1, 2017: 1}
's ability: {2002: 1, 2009: 1, 2017: 1}
personal digital assistants: {2002: 1, 2004: 1, 2009: 1}
proposed technique: {2002: 1, 2015: 2}
symbolic interface: {2002: 3}
software versions: {2002: 1, 2017: 2}
large datasets: {2002: 2, 2016: 1}
formal validation: {2002: 1, 2008: 2}
current paper: {2002: 1, 2011: 1, 2013: 1}
key factors: {2002: 1, 2006: 1, 2009: 1}
software production process: {2002: 3}
real-world problems: {2002: 2, 2006: 1}
compositional verification: {2002: 2, 2013: 1}
one component: {2002: 1, 2008: 1, 2013: 1}
declarative specifications: {2002: 1, 2017: 2}
debugging activities: {2002: 2, 2017: 1}
formal requirements: {2002: 2, 2009: 1}
differential equations: {2003: 1, 2015: 1, 2017: 1}
streaming media: {2003: 1, 2008: 1, 2009: 1}
x-ray views: {2003: 3}
semantic relationships: {2003: 1, 2016: 2}
architectural elements: {2003: 2, 2006: 1}
architecture styles: {2003: 3}
program federation: {2003: 3}
queueing theory: {2003: 1, 2015: 1, 2017: 1}
analysis models: {2003: 1, 2013: 2}
generated test cases: {2003: 1, 2011: 1, 2016: 1}
invariant-coverage suites: {2003: 3}
dynamic detection: {2003: 3}
invariant-coverage criterion: {2003: 3}
likely invariants: {2003: 1, 2017: 2}
significant amount: {2003: 2, 2013: 1}
modeling languages: {2003: 1, 2011: 2}
open-source system: {2003: 1, 2006: 1, 2016: 1}
reusable components: {2003: 2, 2011: 1}
design problem: {2003: 3}
multiviews component: {2003: 3}
system maintenance: {2003: 1, 2012: 2}
black-box approach: {2003: 2, 2015: 1}
priori specifications: {2003: 3}
multiprocessing systems: {2003: 1, 2011: 1, 2013: 1}
behavior verification: {2003: 1, 2004: 2}
assertion checking: {2003: 1, 2015: 2}
oracle procedure: {2003: 3}
actual output: {2003: 1, 2004: 2}
object detection: {2003: 1, 2004: 1, 2006: 1}
inspection meetings: {2003: 3}
program maintenance: {2003: 2, 2012: 1}
remote procedure calls: {2003: 1, 2004: 1, 2006: 1}
server-side applications: {2003: 1, 2017: 2}
bayesian networks: {2003: 1, 2012: 2}
heterogeneous systems: {2003: 1, 2017: 2}
different models: {2003: 1, 2008: 1, 2013: 1}
back-level edges: {2003: 3}
spreadsheet programs: {2003: 2, 2016: 1}
two types: {2003: 1, 2015: 1, 2017: 1}
different stakeholders: {2003: 1, 2012: 1, 2013: 1}
code generators: {2003: 2, 2011: 1}
spark approach: {2003: 3}
run-time errors: {2003: 3}
data variables: {2003: 1, 2004: 2}
50 %: {2003: 1, 2012: 1, 2017: 1}
telecommunications domain: {2003: 2, 2008: 1}
two case studies: {2003: 1, 2016: 1, 2017: 1}
program semantics: {2003: 1, 2015: 2}
software life cycle: {2004: 3}
software inspections: {2004: 3}
less time: {2004: 1, 2016: 1, 2017: 1}
project managers: {2004: 2, 2015: 1}
embedded real-time systems: {2004: 2, 2015: 1}
novel method: {2004: 1, 2008: 1, 2017: 1}
application frameworks: {2004: 2, 2015: 1}
critical role: {2004: 2, 2016: 1}
assembly language: {2004: 1, 2006: 2}
fault detection capability: {2004: 1, 2011: 1, 2015: 1}
timing information: {2004: 3}
hci systems: {2004: 3}
formal approach: {2004: 2, 2008: 1}
uml statecharts: {2004: 3}
software model-checking: {2004: 2, 2012: 1}
exhaustive search: {2004: 1, 2009: 1, 2011: 1}
target model: {2004: 1, 2013: 2}
program trace: {2004: 2, 2017: 1}
aspect mining: {2004: 2, 2008: 1}
method behavior: {2004: 2, 2011: 1}
receiver object: {2004: 1, 2008: 2}
fault location: {2004: 1, 2011: 1, 2016: 1}
test automation projects: {2004: 3}
object-oriented systems: {2004: 2, 2009: 1}
last decade: {2004: 1, 2011: 1, 2016: 1}
test-suite reduction: {2004: 3}
flight guidance system: {2004: 3}
framework use: {2004: 3}
historical information: {2004: 1, 2006: 1, 2013: 1}
large software project: {2004: 1, 2006: 1, 2017: 1}
controller behavior: {2004: 3}
concurrency controllers: {2004: 3}
individual features: {2004: 3}
dialog control logic: {2004: 3}
iterative algorithms: {2004: 1, 2006: 1, 2009: 1}
multiple times: {2004: 1, 2012: 1, 2013: 1}
connector entities: {2004: 3}
join points: {2004: 1, 2009: 1, 2015: 1}
test selection: {2004: 2, 2012: 1}
et al.: {2004: 2, 2006: 1}
basic idea: {2004: 1, 2012: 1, 2017: 1}
software assets: {2004: 1, 2015: 2}
prefabricated components: {2004: 3}
system failures: {2004: 2, 2011: 1}
large systems: {2004: 1, 2008: 1, 2015: 1}
tool demonstration: {2006: 1, 2008: 1, 2013: 1}
diverse set: {2006: 1, 2011: 1, 2016: 1}
verifying specifications: {2006: 3}
novel algorithm: {2006: 2, 2015: 1}
database application testing: {2006: 1, 2011: 2}
manual inspection: {2006: 1, 2012: 1, 2016: 1}
data flow graphs: {2006: 1, 2013: 1, 2016: 1}
code patterns: {2006: 1, 2012: 1, 2017: 1}
semantic information: {2006: 1, 2013: 2}
automated theorem provers: {2006: 2, 2016: 1}
network communication: {2006: 3}
language features: {2006: 1, 2011: 2}
new features: {2006: 2, 2008: 1}
certification process: {2006: 3}
huge number: {2006: 1, 2012: 1, 2013: 1}
version history: {2006: 1, 2015: 1, 2017: 1}
90 %: {2006: 1, 2011: 1, 2015: 1}
program binaries: {2006: 1, 2016: 2}
novel solution: {2006: 1, 2008: 1, 2017: 1}
autonomic computing: {2006: 2, 2009: 1}
initialization safety: {2006: 3}
automated code generation: {2006: 2, 2009: 1}
hierarchical models: {2006: 3}
uml class diagram: {2006: 2, 2012: 1}
semantic web: {2006: 1, 2009: 1, 2011: 1}
static verification: {2006: 2, 2017: 1}
system interfaces: {2006: 3}
design defects: {2006: 2, 2016: 1}
industry partner: {2006: 1, 2009: 2}
model management: {2006: 3}
model inference: {2006: 2, 2012: 1}
many software engineering tasks: {2006: 1, 2008: 1, 2016: 1}
asynchronous communication: {2006: 3}
model level: {2006: 1, 2011: 2}
important aspect: {2006: 2, 2017: 1}
service centric systems: {2006: 3}
dhtml applications: {2006: 3}
mock objects: {2006: 3}
high quality: {2008: 1, 2009: 1, 2013: 1}
random access memory: {2008: 2, 2009: 1}
swarm verification: {2008: 2, 2017: 1}
test runs: {2008: 1, 2012: 2}
incremental process: {2008: 3}
present work: {2008: 1, 2011: 2}
frame axioms: {2008: 3}
bounded model: {2008: 1, 2013: 1, 2016: 1}
automatic debugging: {2008: 2, 2012: 1}
future research: {2008: 1, 2013: 2}
context-free grammar: {2008: 1, 2016: 2}
temporal logic specifications: {2008: 1, 2013: 2}
first time: {2008: 1, 2015: 1, 2016: 1}
boolean satisfiability: {2008: 1, 2016: 2}
test-suite augmentation: {2008: 3}
next step: {2008: 1, 2015: 1, 2017: 1}
sql query: {2008: 2, 2013: 1}
generated data: {2008: 3}
upper bound: {2008: 1, 2015: 1, 2017: 1}
crosscutting concern: {2008: 2, 2011: 1}
method clusters: {2008: 3}
multiprocessing programs: {2008: 1, 2013: 2}
sampling methods: {2008: 1, 2009: 1, 2015: 1}
proposed algorithm: {2008: 1, 2017: 2}
classification algorithms: {2008: 2, 2017: 1}
key issue: {2008: 1, 2009: 2}
linux device drivers: {2008: 1, 2016: 2}
generic patch: {2008: 3}
tool developers: {2008: 1, 2012: 1, 2016: 1}
specific needs: {2008: 1, 2009: 1, 2012: 1}
code fragments: {2008: 1, 2011: 1, 2016: 1}
input program: {2008: 1, 2012: 1, 2015: 1}
two algorithms: {2008: 1, 2016: 1, 2017: 1}
counterexample-guided abstraction refinement: {2008: 1, 2012: 2}
proof templates: {2008: 3}
behavioral differences: {2008: 2, 2017: 1}
domain model: {2008: 1, 2009: 2}
peer-to-peer computing: {2008: 1, 2017: 2}
automated integration system: {2008: 3}
' behavior: {2008: 1, 2012: 1, 2017: 1}
path space: {2008: 3}
preliminary evaluation: {2008: 1, 2016: 1, 2017: 1}
cleman framework: {2008: 3}
current web applications: {2008: 3}
's work: {2008: 2, 2011: 1}
semiautomated approach: {2008: 1, 2011: 1, 2013: 1}
medical services: {2008: 1, 2009: 1, 2013: 1}
health care: {2008: 1, 2009: 1, 2013: 1}
meta data: {2008: 1, 2011: 1, 2015: 1}
business process: {2008: 1, 2013: 1, 2017: 1}
eclipse plugin: {2008: 1, 2013: 2}
self-adaptive systems: {2008: 3}
vhdl code: {2008: 2, 2016: 1}
simulation model: {2008: 3}
qvt relations: {2009: 3}
linguistic analysis: {2009: 2, 2017: 1}
time-consuming task: {2009: 2, 2011: 1}
software test generation: {2009: 2, 2017: 1}
significant challenges: {2009: 2, 2016: 1}
fault injection: {2009: 2, 2013: 1}
usage pattern: {2009: 2, 2011: 1}
systematic approach: {2009: 1, 2011: 1, 2017: 1}
surface-mount technology: {2009: 3}
practical tool: {2009: 2, 2011: 1}
infinite loops: {2009: 3}
testing technique: {2009: 1, 2017: 2}
testing approach: {2009: 1, 2016: 2}
greedy algorithms: {2009: 1, 2016: 1, 2017: 1}
frequent itemset mining: {2009: 1, 2016: 2}
software defects: {2009: 1, 2012: 1, 2013: 1}
mining algorithm: {2009: 1, 2016: 1, 2017: 1}
application programming interface: {2009: 1, 2016: 2}
existing research: {2009: 1, 2015: 1, 2017: 1}
many developers: {2009: 1, 2016: 2}
business rules: {2009: 2, 2013: 1}
abbreviation completion: {2009: 3}
programming errors: {2009: 2, 2012: 1}
parametric properties: {2009: 3}
performance counters: {2009: 3}
deterministic parallel java: {2009: 2, 2015: 1}
effect systems: {2009: 3}
test code: {2009: 2, 2015: 1}
state-space exploration: {2009: 1, 2011: 2}
deadlock detection: {2009: 1, 2015: 1, 2016: 1}
ant colony optimization: {2009: 1, 2015: 2}
better decisions: {2009: 1, 2011: 1, 2013: 1}
usability evaluation: {2009: 1, 2017: 2}
usability analysis: {2009: 3}
aspect-oriented requirements engineering: {2009: 3}
learning systems: {2009: 1, 2016: 1, 2017: 1}
75 %: {2009: 1, 2012: 1, 2016: 1}
metamodel change: {2009: 3}
eclipse modeling: {2009: 2, 2011: 1}
program elements: {2009: 1, 2011: 2}
novel tool: {2009: 1, 2016: 1, 2017: 1}
malicious inputs: {2009: 3}
attack pattern: {2009: 3}
program point: {2009: 1, 2011: 2}
individual test cases: {2009: 2, 2016: 1}
error-prone phase: {2009: 1, 2012: 2}
diagnosis candidates: {2009: 1, 2012: 1, 2013: 1}
test case selection: {2009: 1, 2016: 2}
rich internet applications: {2009: 3}
validation errors: {2011: 3}
web development: {2011: 1, 2013: 2}
industrial system: {2011: 2, 2013: 1}
approximation methods: {2011: 2, 2015: 1}
bug diagnosis: {2011: 2, 2017: 1}
failed test: {2011: 3}
tool implementation: {2011: 1, 2013: 1, 2016: 1}
query results: {2011: 2, 2013: 1}
's execution: {2011: 1, 2013: 2}
40 %: {2011: 1, 2013: 1, 2017: 1}
multi-threaded programs: {2011: 1, 2013: 1, 2015: 1}
java pathfinder model checker: {2011: 2, 2015: 1}
state space explosion: {2011: 1, 2015: 2}
concurrency model: {2011: 2, 2012: 1}
memory access: {2011: 1, 2017: 2}
cut-off criteria: {2011: 3}
large models: {2011: 1, 2013: 1, 2017: 1}
configuration options: {2011: 2, 2017: 1}
monitoring data: {2011: 1, 2013: 2}
api libraries: {2011: 2, 2016: 1}
resource leaks: {2011: 1, 2013: 2}
bug tracking system: {2011: 2, 2012: 1}
textual similarity: {2011: 2, 2015: 1}
mean average precision: {2011: 2, 2017: 1}
47 %: {2011: 1, 2012: 1, 2016: 1}
textual contents: {2011: 3}
adaptive software: {2011: 1, 2012: 1, 2017: 1}
evolution paths: {2011: 2, 2013: 1}
historical data: {2011: 2, 2012: 1}
behavior preservation: {2011: 2, 2012: 1}
constraint satisfaction problems: {2011: 1, 2013: 2}
analysis operations: {2011: 2, 2013: 1}
relevant answers: {2011: 3}
71 %: {2011: 2, 2017: 1}
software process evaluation: {2011: 3}
empirical se: {2011: 3}
architecture changes: {2011: 3}
end-user programming: {2011: 3}
data dependencies: {2011: 2, 2015: 1}
transformation program: {2011: 3}
control dependencies: {2011: 1, 2016: 1, 2017: 1}
main idea: {2011: 2, 2017: 1}
social network: {2011: 1, 2013: 2}
code understanding: {2011: 1, 2012: 2}
suspiciousness scores: {2011: 3}
selection techniques: {2011: 3}
sentiment polarity: {2011: 3}
software resource: {2011: 3}
goal-oriented requirements engineering: {2011: 2, 2016: 1}
optional goals: {2011: 3}
several orders: {2011: 1, 2016: 1, 2017: 1}
client program: {2011: 3}
sat solver: {2011: 2, 2013: 1}
configuration files: {2011: 1, 2016: 2}
important problem: {2011: 1, 2016: 1, 2017: 1}
natural language text: {2011: 3}
bidirectional model transformations: {2011: 1, 2013: 2}
entire system: {2011: 2, 2013: 1}
elastic predicates: {2011: 3}
statistical debugging: {2011: 1, 2016: 2}
software failures: {2011: 3}
certain behavior: {2011: 3}
locating code: {2011: 2, 2012: 1}
optimization problem: {2011: 2, 2013: 1}
automated tool support: {2011: 1, 2015: 1, 2016: 1}
evolutionary computation: {2011: 2, 2013: 1}
execution environment: {2011: 2, 2015: 1}
environmental conditions: {2011: 2, 2017: 1}
program entities: {2011: 3}
many tools: {2011: 1, 2017: 2}
user events: {2011: 2, 2017: 1}
functional invariants: {2011: 3}
core system: {2011: 3}
term synthesis: {2011: 3}
usage examples: {2011: 3}
target api: {2011: 3}
slicing operator: {2011: 3}
uml-rt models: {2011: 3}
object graph: {2011: 1, 2013: 2}
extensible framework: {2011: 2, 2016: 1}
information retrieval techniques: {2011: 1, 2017: 2}
self-adaptive software systems: {2011: 3}
many bugs: {2012: 1, 2016: 2}
privacy control: {2012: 1, 2017: 2}
private information: {2012: 3}
formal signature: {2012: 3}
configuration tools: {2012: 3}
process-level energy monitoring: {2012: 3}
automated inference: {2012: 1, 2013: 1, 2016: 1}
prediction model: {2012: 2, 2015: 1}
feature location: {2012: 3}
code injection: {2012: 3}
machine learning technique: {2012: 3}
code cloning operation: {2012: 3}
cloning operations: {2012: 3}
important task: {2012: 2, 2016: 1}
data sharing: {2012: 2, 2016: 1}
statistical testing: {2012: 2, 2017: 1}
dynamic web applications: {2012: 3}
matrix algebra: {2012: 1, 2013: 1, 2016: 1}
use case analysis: {2012: 3}
software defect prediction: {2012: 2, 2013: 1}
80 %: {2012: 1, 2013: 1, 2015: 1}
software fault prediction: {2012: 3}
information services: {2012: 1, 2015: 1, 2016: 1}
increasing demand: {2012: 1, 2016: 1, 2017: 1}
complex applications: {2012: 1, 2017: 2}
control engineering computing: {2012: 1, 2015: 1, 2017: 1}
software building: {2012: 2, 2016: 1}
program equivalence: {2012: 2, 2013: 1}
refined program: {2012: 3}
reference solutions: {2013: 3}
malware analysis: {2013: 1, 2017: 2}
dynamic dependence summaries: {2013: 3}
first technique: {2013: 1, 2015: 1, 2017: 1}
ports (computers): {2013: 1, 2016: 2}
empirical data: {2013: 2, 2015: 1}
bug-finding technique: {2013: 1, 2015: 2}
parallel analysis: {2013: 3}
candidate solutions: {2013: 3}
java projects: {2013: 1, 2015: 1, 2017: 1}
model comparison: {2013: 1, 2016: 2}
business analysts: {2013: 3}
higher coverage: {2013: 1, 2015: 1, 2017: 1}
loop problems: {2013: 3}
real-world software applications: {2013: 3}
technical problems: {2013: 3}
diagnostic quality: {2013: 3}
search-based test generation tool: {2013: 2, 2015: 1}
diagnostic ranking: {2013: 3}
61 %: {2013: 2, 2015: 1}
separate prediction model: {2013: 3}
bug similarity data: {2013: 3}
search-based software engineering: {2013: 1, 2015: 1, 2016: 1}
bug fixes: {2013: 2, 2017: 1}
porting errors: {2013: 3}
resource leak: {2013: 1, 2016: 2}
lightweight static analysis: {2013: 1, 2015: 1, 2017: 1}
android framework: {2013: 1, 2017: 2}
model-driven software engineering: {2013: 2, 2016: 1}
complex queries: {2013: 1, 2017: 2}
fully automated approach: {2013: 1, 2017: 2}
behavioral models: {2013: 1, 2015: 2}
ground truths: {2013: 3}
polyhedral analysis: {2013: 3}
polyhedral optimization: {2013: 3}
empirical evidence: {2013: 1, 2015: 1, 2017: 1}
random strategy: {2013: 3}
class diagram: {2013: 2, 2016: 1}
daq system: {2013: 3}
rule acts: {2013: 3}
association rule mining: {2013: 1, 2016: 1, 2017: 1}
association rule: {2013: 1, 2016: 1, 2017: 1}
application failure: {2013: 3}
cloud twin: {2013: 3}
javascript functions: {2013: 1, 2015: 2}
stackelberg games: {2013: 3}
input space: {2013: 3}
fault localization process: {2013: 3}
basic blocks: {2013: 3}
java methods: {2013: 1, 2015: 1, 2017: 1}
pattern-based approach: {2013: 1, 2016: 2}
sound refinements: {2013: 3}
ocl constraints: {2013: 2, 2015: 1}
multi-objective optimization: {2013: 1, 2016: 2}
contract-based design: {2013: 3}
dynamic thread creation: {2013: 2, 2015: 1}
workload fluctuations: {2013: 1, 2017: 2}
posix threads: {2013: 2, 2015: 1}
secret specification: {2013: 3}
emergent behavior: {2013: 3}
synthesis algorithm: {2013: 3}
logical specification: {2013: 3}
novel analysis: {2013: 1, 2015: 2}
introductory welcome message: {2015: 1, 2017: 2}
conference officers: {2015: 1, 2017: 2}
' congratulations: {2015: 1, 2017: 2}
conference event publication: {2015: 1, 2017: 2}
proceedings record: {2015: 1, 2017: 2}
re-ranking approach: {2015: 3}
software text retrieval: {2015: 1, 2017: 2}
array-intensive programs: {2015: 3}
benchmark suite: {2015: 3}
program types: {2015: 2, 2017: 1}
memory leaks: {2015: 3}
large-scale codebase: {2015: 3}
extended boolean model: {2015: 3}
free-text queries: {2015: 1, 2017: 2}
http proxy server: {2015: 3}
restful api documentation: {2015: 3}
information fragmentation problem: {2015: 3}
cross-cutting information: {2015: 3}
separate applications: {2015: 3}
's activity: {2015: 2, 2017: 1}
desired behavior: {2015: 1, 2017: 2}
crash traces: {2015: 2, 2017: 1}
probabilistic model checking: {2015: 1, 2017: 2}
qos requirements: {2015: 3}
63 %: {2015: 3}
fourier transform: {2015: 2, 2016: 1}
configurable software system: {2015: 3}
mspl generation process: {2015: 3}
in-flight entertainment system: {2015: 3}
mof-based models: {2015: 3}
android api: {2015: 2, 2016: 1}
differential testing: {2015: 1, 2017: 2}
deep neural network: {2015: 3}
higher accuracy: {2015: 1, 2016: 1, 2017: 1}
language fuzzing: {2015: 3}
safe parallelism: {2015: 3}
permission regions: {2015: 3}
selected executions: {2015: 3}
safe < sub >: {2015: 3}
smt framework: {2015: 3}
lexical tokens: {2015: 3}
semantic symbols: {2015: 3}
two languages: {2015: 1, 2016: 1, 2017: 1}
83 %: {2015: 1, 2016: 1, 2017: 1}
field-based approach: {2015: 3}
new feature: {2015: 1, 2016: 1, 2017: 1}
version histories: {2015: 1, 2017: 2}
probabilistic symbolic execution: {2015: 1, 2016: 2}
program versions: {2015: 1, 2016: 1, 2017: 1}
performance characteristics: {2015: 3}
industrial sos: {2015: 3}
nh90 helicopter: {2015: 3}
review analysis: {2015: 2, 2016: 1}
app reviews: {2015: 2, 2016: 1}
system of systems: {2015: 1, 2017: 2}
dom elements: {2015: 3}
image color analysis: {2015: 1, 2016: 2}
architectural stability: {2015: 3}
tag clouds: {2015: 2, 2016: 1}
instruction locality: {2016: 3}
compiler optimisations: {2016: 1, 2017: 2}
human-engineered classifier features: {2016: 3}
software maintenance evolution: {2016: 2, 2017: 1}
modification expertise: {2016: 3}
code reviewer recommendation: {2016: 3}
code segment: {2016: 3}
security testing: {2016: 3}
crowd intelligence: {2016: 2, 2017: 1}
crowdsourcing tasks: {2016: 3}
android ecosystem: {2016: 2, 2017: 1}
root causes: {2016: 2, 2017: 1}
effort-aware fault-proneness prediction: {2016: 3}
prior studies: {2016: 1, 2017: 2}
lightweight logging: {2016: 3}
dynamic impact analysis: {2016: 2, 2017: 1}
bug radius: {2016: 3}
state-of-the-art tools: {2016: 2, 2017: 1}
ci systems: {2016: 3}
error handling: {2016: 3}
error specifications: {2016: 3}
variability-aware execution: {2016: 3}
configuration space: {2016: 2, 2017: 1}
optimization problems: {2016: 3}
arithmetic operations: {2016: 1, 2017: 2}
experiment results: {2016: 1, 2017: 2}
type dependencies: {2016: 3}
domain elements: {2016: 3}
bug-finding effectiveness: {2016: 3}
forbidden tuples: {2016: 3}
big data applications: {2016: 3}
energy efficiency: {2016: 1, 2017: 2}
n-gram language model: {2016: 3}
change recommendation: {2016: 3}
's change history: {2016: 2, 2017: 1}
reflective calls: {2016: 3}
traditional debugger: {2016: 1, 2017: 2}
event sequences: {2016: 3}
data-flow analyses: {2016: 3}
apr techniques: {2016: 2, 2017: 1}
software requirement selection: {2016: 3}
requirement dependencies: {2016: 3}
runtime information: {2016: 2, 2017: 1}
massive text data: {2017: 3}
background services: {2017: 3}
crowd-based testing: {2017: 3}
travis ci: {2017: 3}
issue resolution times: {2017: 3}
fragile comments: {2017: 3}
software-specific conceptual knowledge: {2017: 3}
link recovery model: {2017: 3}
traditional classifier: {2017: 3}
online developer forums: {2017: 3}
craig interpolation: {2017: 3}
universal safety interpolant: {2017: 3}
existential error interpolant: {2017: 3}
business process models: {2017: 3}
similarity score: {2017: 3}
binary code: {2017: 3}
two functions: {2017: 3}
software fault injection: {2017: 3}
community standards: {2017: 3}
production engineering computing: {2017: 3}
model predictive control: {2017: 3}
performance behavior: {2017: 3}
numerical bugs: {2017: 3}
comprehensive study: {2017: 3}
web application code: {2017: 3}
symbolic values: {2017: 3}
configuration language: {2017: 3}
overfitting problem: {2017: 3}
machine-learnt model: {2017: 3}
candidate chunk: {2017: 3}
complete statement: {2017: 3}
recommendation relevance: {2017: 3}
randomized scheduling: {2017: 3}
admissible schedules: {2017: 3}
hoare triple: {2017: 3}
selective sampling: {2017: 3}
concrete states: {2017: 3}
expected behavior: {2017: 3}
test suite parallelization: {2017: 3}
gtr algorithm: {2017: 3}
synthetic test data: {2017: 3}
continuous execution: {2017: 3}
reachability determination: {2017: 3}
natural language interface: {2017: 3}
api reviews: {2017: 3}
integer errors: {2017: 3}
erroneous code: {2017: 3}
quantitative decision models: {2017: 3}
